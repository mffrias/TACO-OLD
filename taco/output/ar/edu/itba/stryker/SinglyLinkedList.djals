//-------------- ar_edu_itba_stryker_SinglyLinkedList --------------//
module ar_edu_itba_stryker_SinglyLinkedList
sig ar_edu_itba_stryker_SinglyLinkedList extends java_lang_Object {}
{}
field ar_edu_itba_stryker_SinglyLinkedList_header:(ar_edu_itba_stryker_SinglyLinkedList)->one(null+roops_core_objects_SinglyLinkedListNode) {}

object_invariant
   all n:null+roops_core_objects_SinglyLinkedListNode | {
     liftExpression[fun_set_contains[fun_reach[thiz.ar_edu_itba_stryker_SinglyLinkedList_header,roops_core_objects_SinglyLinkedListNode,roops_core_objects_SinglyLinkedListNode_next],n]]
     implies 
             equ[fun_set_contains[fun_reach[n.roops_core_objects_SinglyLinkedListNode_next,roops_core_objects_SinglyLinkedListNode,roops_core_objects_SinglyLinkedListNode_next],n],
                false]
   
   }



program ar_edu_itba_stryker_SinglyLinkedList::insertBack[
  var thiz:ar_edu_itba_stryker_SinglyLinkedList,
  var throw:java_lang_Throwable+null,
  var data:java_lang_Object+null,
  var freshNode:null+roops_core_objects_SinglyLinkedListNode] 
Specification 
{
  SpecCase #0 {
   requires {
      neq[freshNode,
         null]
   }
   
   requires {
      equ[fun_set_contains[fun_reach[thiz.ar_edu_itba_stryker_SinglyLinkedList_header,roops_core_objects_SinglyLinkedListNode,roops_core_objects_SinglyLinkedListNode_next],freshNode],
         false]
   }
   
   requires {
      not (
        data=null)
   }
   
   requires {
      not (
        freshNode=null)
   }
   
   ensures {
      instanceOf[throw',
                java_lang_Exception]
      implies 
              liftExpression[false]
   }
   
   ensures {
      (
        throw'=null)
      implies 
              (
                some n:null+roops_core_objects_SinglyLinkedListNode | {
                  liftExpression[fun_set_contains[fun_reach[thiz'.ar_edu_itba_stryker_SinglyLinkedList_header',roops_core_objects_SinglyLinkedListNode,roops_core_objects_SinglyLinkedListNode_next'],n]]
                  and 
                  equ[n.roops_core_objects_SinglyLinkedListNode_next',
                     null]
                  and 
                  equ[n.roops_core_objects_SinglyLinkedListNode_value',
                     data']
                
                }
              )
   }
   
   ensures {
      (
        throw'=null)
      implies 
              (
                all n:null+roops_core_objects_SinglyLinkedListNode | {
                  liftExpression[fun_set_contains[fun_reach[thiz.ar_edu_itba_stryker_SinglyLinkedList_header,roops_core_objects_SinglyLinkedListNode,roops_core_objects_SinglyLinkedListNode_next],n]]
                  implies 
                          equ[fun_set_contains[fun_reach[thiz'.ar_edu_itba_stryker_SinglyLinkedList_header',roops_core_objects_SinglyLinkedListNode,roops_core_objects_SinglyLinkedListNode_next'],n],
                             true]
                
                }
              )
   }
   
   ensures {
      (
        throw'=null)
      implies 
              equ[fun_java_primitive_integer_value_size_of[fun_reach[thiz'.ar_edu_itba_stryker_SinglyLinkedList_header',roops_core_objects_SinglyLinkedListNode,roops_core_objects_SinglyLinkedListNode_next']],
                 SK_jml_pred_java_primitive_integer_value_add_ARG_result_0]
   }
   
   modifies {
   EVERYTHING}
  }
}
Implementation 

   {
      skip;
      {
         throw:=null;
         var exit_stmt_reached:boolean;
         exit_stmt_reached:=false;
         {
            var t_8:boolean;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[freshNode]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  freshNode.roops_core_objects_SinglyLinkedListNode_value:=data;
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[freshNode]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  freshNode.roops_core_objects_SinglyLinkedListNode_next:=((null+roops_core_objects_SinglyLinkedListNode) & (null));
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               t_8:=(equ[thiz.ar_edu_itba_stryker_SinglyLinkedList_header,
                  null]=>(true)else(false));
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if t_8=true{
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     if isEmptyOrNull[thiz]{
                        throw:=java_lang_NullPointerExceptionLit;
                     } else {
                        thiz.ar_edu_itba_stryker_SinglyLinkedList_header:=freshNode;
                     };
                  } else {
                     skip;
                  };
               } else    {
                     var var_6_current:null+roops_core_objects_SinglyLinkedListNode;
                     if (
                       throw=null)
                     and 
                     (
                       exit_stmt_reached=false){
                        if isEmptyOrNull[thiz]{
                           throw:=java_lang_NullPointerExceptionLit;
                        } else {
                           var_6_current:=thiz.ar_edu_itba_stryker_SinglyLinkedList_header;
                        };
                     } else {
                        skip;
                     };
                     var var_7_ws_2:boolean;
                     if (
                       throw=null)
                     and 
                     (
                       exit_stmt_reached=false){
                        var_7_ws_2:=(neq[var_6_current.roops_core_objects_SinglyLinkedListNode_next,
                           null]=>(true)else(false));
                     } else {
                        skip;
                     };
                     while liftExpression[var_7_ws_2]
                     and 
                     (
                       throw=null)
                     and 
                     (
                       exit_stmt_reached=false)
                     
                        {
                           if (
                             throw=null)
                           and 
                           (
                             exit_stmt_reached=false){
                              if isEmptyOrNull[var_6_current]{
                                 throw:=java_lang_NullPointerExceptionLit;
                              } else {
                                 var_6_current:=var_6_current.roops_core_objects_SinglyLinkedListNode_next;
                              };
                           } else {
                              skip;
                           };
                           if (
                             throw=null)
                           and 
                           (
                             exit_stmt_reached=false){
                              var_7_ws_2:=(neq[var_6_current.roops_core_objects_SinglyLinkedListNode_next,
                                 null]=>(true)else(false));
                           } else {
                              skip;
                           };
                        
                        }
                     ;
                     if (
                       throw=null)
                     and 
                     (
                       exit_stmt_reached=false){
                        if isEmptyOrNull[var_6_current]{
                           throw:=java_lang_NullPointerExceptionLit;
                        } else {
                           var_6_current.roops_core_objects_SinglyLinkedListNode_next:=freshNode;
                        };
                     } else {
                        skip;
                     };
                  
                  }
               ;
            } else {
               skip;
            };
         
         }
      
      }
      skip;
   
   }


program ar_edu_itba_stryker_SinglyLinkedList::contains[
  var thiz:ar_edu_itba_stryker_SinglyLinkedList,
  var throw:java_lang_Throwable+null,
  var return:boolean,
  var value_param:java_lang_Object+null] 
Specification 
{
  SpecCase #0 {
   ensures {
      instanceOf[throw',
                java_lang_Exception]
      implies 
              liftExpression[false]
   }
   
   ensures {
      (
        throw'=null)
      implies 
              equ[return',
                 true]
   }
   
   modifies {
   EVERYTHING}
  }
}
Implementation 

   {
      skip;
      {
         throw:=null;
         var exit_stmt_reached:boolean;
         exit_stmt_reached:=false;
         {
            var var_1_current:null+roops_core_objects_SinglyLinkedListNode;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[thiz]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  var_1_current:=thiz.ar_edu_itba_stryker_SinglyLinkedList_header;
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[var_1_current]
               or 
               isEmptyOrNull[var_1_current.roops_core_objects_SinglyLinkedListNode_next]
               
               or 
               isEmptyOrNull[var_1_current]
               {
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  var_1_current.roops_core_objects_SinglyLinkedListNode_next:=(var_1_current.roops_core_objects_SinglyLinkedListNode_next).roops_core_objects_SinglyLinkedListNode_next;
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false)   {
                  return:=true;
                  exit_stmt_reached:=true;
               
               }
             else {
               skip;
            };
         
         }
      
      }
      skip;
   
   }


program ar_edu_itba_stryker_SinglyLinkedList::main[
  var throw:java_lang_Throwable+null,
  var args:java_lang_ObjectArray+null] 
Implementation 

   {
      skip;
      {
         throw:=null;
         var exit_stmt_reached:boolean;
         exit_stmt_reached:=false;
         {
            var t_9:ar_edu_itba_stryker_SinglyLinkedList+null;
            var t_10:null+roops_core_objects_SinglyLinkedListNode;
            var t_11:boolean;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false)   {
                  createObject<ar_edu_itba_stryker_SinglyLinkedList>[t_9];
                  if isEmptyOrNull[t_9]{
                     throw:=java_lang_NullPointerExceptionLit;
                  } else {
                     call Constructor[t_9,throw];
                  };
               
               }
             else {
               skip;
            };
            var var_8_list:ar_edu_itba_stryker_SinglyLinkedList+null;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               var_8_list:=t_9;
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false)   {
                  createObject<roops_core_objects_SinglyLinkedListNode>[t_10];
                  if isEmptyOrNull[t_10]{
                     throw:=java_lang_NullPointerExceptionLit;
                  } else {
                     call Constructor[t_10,throw];
                  };
               
               }
             else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[var_8_list]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  var_8_list.ar_edu_itba_stryker_SinglyLinkedList_header:=t_10;
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[var_8_list]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  call contains[var_8_list,throw,t_11,null];
               };
            } else {
               skip;
            };
         
         }
      
      }
      skip;
   
   }


program ar_edu_itba_stryker_SinglyLinkedList::Constructor[
  var thiz:ar_edu_itba_stryker_SinglyLinkedList,
  var throw:java_lang_Throwable+null] 
Implementation 

   {
      skip;
      {
         throw:=null;
         var exit_stmt_reached:boolean;
         exit_stmt_reached:=false;
         if (
           throw=null)
         and 
         (
           exit_stmt_reached=false){
            if isEmptyOrNull[thiz]{
               throw:=java_lang_NullPointerExceptionLit;
            } else {
               thiz.ar_edu_itba_stryker_SinglyLinkedList_header:=((null+roops_core_objects_SinglyLinkedListNode) & (null));
            };
         } else {
            skip;
         };
      
      }
      skip;
   
   }


program ar_edu_itba_stryker_SinglyLinkedList::getNode[
  var thiz:ar_edu_itba_stryker_SinglyLinkedList,
  var throw:java_lang_Throwable+null,
  var return:null+roops_core_objects_SinglyLinkedListNode,
  var index:JavaPrimitiveIntegerValue] 
Specification 
{
  SpecCase #0 {
   requires {
      pred_java_primitive_integer_value_gte[index,
                                           JavaPrimitiveIntegerLiteral0]
      and 
      pred_java_primitive_integer_value_lt[index,
                                          fun_java_primitive_integer_value_size_of[fun_reach[thiz.ar_edu_itba_stryker_SinglyLinkedList_header,roops_core_objects_SinglyLinkedListNode,roops_core_objects_SinglyLinkedListNode_next]]]
   }
   
   ensures {
      instanceOf[throw',
                java_lang_Exception]
      implies 
              liftExpression[false]
   }
   
   ensures {
      (
        throw'=null)
      implies 
              equ[fun_java_primitive_integer_value_size_of[fun_reach[return',roops_core_objects_SinglyLinkedListNode,roops_core_objects_SinglyLinkedListNode_next']],
                 SK_jml_pred_java_primitive_integer_value_sub_ARG_result_0]
   }
   
   ensures {
      (
        throw'=null)
      implies 
              equ[fun_set_contains[fun_reach[thiz'.ar_edu_itba_stryker_SinglyLinkedList_header',roops_core_objects_SinglyLinkedListNode,roops_core_objects_SinglyLinkedListNode_next'],return'],
                 true]
   }
   
   modifies {
   EVERYTHING}
  }
}
Implementation 

   {
      skip;
      {
         throw:=null;
         var exit_stmt_reached:boolean;
         exit_stmt_reached:=false;
         {
            var t_1:boolean;
            var t_2:boolean;
            var t_3:boolean;
            var var_2_current:null+roops_core_objects_SinglyLinkedListNode;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[thiz]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  var_2_current:=thiz.ar_edu_itba_stryker_SinglyLinkedList_header;
               };
            } else {
               skip;
            };
            var var_3_result:null+roops_core_objects_SinglyLinkedListNode;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               var_3_result:=((null+roops_core_objects_SinglyLinkedListNode) & (null));
            } else {
               skip;
            };
            var var_4_current_index:JavaPrimitiveIntegerValue;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               var_4_current_index:=JavaPrimitiveIntegerLiteral0;
            } else {
               skip;
            };
            var var_5_ws_1:boolean;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               t_2:=(equ[var_3_result,
                  null]=>(true)else(false));
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               t_3:=(neq[var_2_current,
                  null]=>(true)else(false));
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if t_2=true{
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     if t_3=true{
                        if (
                          throw=null)
                        and 
                        (
                          exit_stmt_reached=false){
                           t_1:=true;
                        } else {
                           skip;
                        };
                     } else {
                        if (
                          throw=null)
                        and 
                        (
                          exit_stmt_reached=false){
                           t_1:=false;
                        } else {
                           skip;
                        };
                     };
                  } else {
                     skip;
                  };
               } else {
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     t_1:=false;
                  } else {
                     skip;
                  };
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               var_5_ws_1:=t_1;
            } else {
               skip;
            };
            while liftExpression[var_5_ws_1]
            and 
            (
              throw=null)
            and 
            (
              exit_stmt_reached=false)
            
               {
                  var t_4:boolean;
                  var t_5:boolean;
                  var t_6:boolean;
                  var t_7:boolean;
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     t_4:=(equ[index,
                        var_4_current_index]=>(true)else(false));
                  } else {
                     skip;
                  };
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     if t_4=true{
                        if (
                          throw=null)
                        and 
                        (
                          exit_stmt_reached=false){
                           var_3_result:=var_2_current;
                        } else {
                           skip;
                        };
                     } else {
                        skip;
                     };
                  } else {
                     skip;
                  };
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     var_4_current_index:=fun_java_primitive_integer_value_add[var_4_current_index,JavaPrimitiveIntegerLiteral1];
                  } else {
                     skip;
                  };
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     if isEmptyOrNull[var_2_current]{
                        throw:=java_lang_NullPointerExceptionLit;
                     } else {
                        var_2_current:=var_2_current.roops_core_objects_SinglyLinkedListNode_next;
                     };
                  } else {
                     skip;
                  };
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     t_6:=(equ[var_3_result,
                        null]=>(true)else(false));
                  } else {
                     skip;
                  };
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     t_7:=(neq[var_2_current,
                        null]=>(true)else(false));
                  } else {
                     skip;
                  };
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     if t_6=true{
                        if (
                          throw=null)
                        and 
                        (
                          exit_stmt_reached=false){
                           if t_7=true{
                              if (
                                throw=null)
                              and 
                              (
                                exit_stmt_reached=false){
                                 t_5:=true;
                              } else {
                                 skip;
                              };
                           } else {
                              if (
                                throw=null)
                              and 
                              (
                                exit_stmt_reached=false){
                                 t_5:=false;
                              } else {
                                 skip;
                              };
                           };
                        } else {
                           skip;
                        };
                     } else {
                        if (
                          throw=null)
                        and 
                        (
                          exit_stmt_reached=false){
                           t_5:=false;
                        } else {
                           skip;
                        };
                     };
                  } else {
                     skip;
                  };
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     var_5_ws_1:=t_5;
                  } else {
                     skip;
                  };
               
               }
            ;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false)   {
                  return:=var_3_result;
                  exit_stmt_reached:=true;
               
               }
             else {
               skip;
            };
         
         }
      
      }
      skip;
   
   }


program ar_edu_itba_stryker_SinglyLinkedList::showInstance[
  var thiz:ar_edu_itba_stryker_SinglyLinkedList,
  var throw:java_lang_Throwable+null,
  var return:boolean] 
Specification 
{
  SpecCase #0 {
   requires {
      equ[fun_java_primitive_integer_value_size_of[fun_reach[thiz.ar_edu_itba_stryker_SinglyLinkedList_header,roops_core_objects_SinglyLinkedListNode,roops_core_objects_SinglyLinkedListNode_next]],
         JavaPrimitiveIntegerLiteral100]
   }
   
   ensures {
      (
        throw'=null)
      implies 
              equ[return',
                 false]
   }
   
   modifies {
   EVERYTHING}
  }
}
Implementation 

   {
      skip;
      {
         throw:=null;
         var exit_stmt_reached:boolean;
         exit_stmt_reached:=false;
         if (
           throw=null)
         and 
         (
           exit_stmt_reached=false)   {
               return:=true;
               exit_stmt_reached:=true;
            
            }
          else {
            skip;
         };
      
      }
      skip;
   
   }



