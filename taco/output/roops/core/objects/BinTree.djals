//-------------- roops_core_objects_BinTree --------------//
module roops_core_objects_BinTree
sig roops_core_objects_BinTree extends java_lang_Object {}
{}
field roops_core_objects_BinTree_root:(roops_core_objects_BinTree)->one(null+roops_core_objects_BinTreeNode) {}
field roops_core_objects_BinTree_size:(roops_core_objects_BinTree)->one(Int) {}

object_invariant
   equ[thiz.roops_core_objects_BinTree_size,
      fun_set_size[fun_reach[thiz.roops_core_objects_BinTree_root,roops_core_objects_BinTreeNode,roops_core_objects_BinTreeNode_left+roops_core_objects_BinTreeNode_right]]]

object_invariant
   all n:null+roops_core_objects_BinTreeNode | {
     equ[fun_set_contains[fun_reach[thiz.roops_core_objects_BinTree_root,roops_core_objects_BinTreeNode,roops_core_objects_BinTreeNode_left+roops_core_objects_BinTreeNode_right],n],
        true]
     implies 
             (
               (
                 all m:null+roops_core_objects_BinTreeNode | {
                   equ[fun_set_contains[fun_reach[n.roops_core_objects_BinTreeNode_left,roops_core_objects_BinTreeNode,roops_core_objects_BinTreeNode_left+roops_core_objects_BinTreeNode_right],m],
                      true]
                   implies 
                           lte[m.roops_core_objects_BinTreeNode_key,
                              n.roops_core_objects_BinTreeNode_key]
                 
                 }
               )
               and 
               (
                 all m:null+roops_core_objects_BinTreeNode | {
                   equ[fun_set_contains[fun_reach[n.roops_core_objects_BinTreeNode_right,roops_core_objects_BinTreeNode,roops_core_objects_BinTreeNode_left+roops_core_objects_BinTreeNode_right],m],
                      true]
                   implies 
                           gt[m.roops_core_objects_BinTreeNode_key,
                             n.roops_core_objects_BinTreeNode_key]
                 
                 }
               )
             )
   
   }

object_invariant
   all n:null+roops_core_objects_BinTreeNode | {
     equ[fun_set_contains[fun_reach[thiz.roops_core_objects_BinTree_root,roops_core_objects_BinTreeNode,roops_core_objects_BinTreeNode_left+roops_core_objects_BinTreeNode_right],n],
        true]
     implies 
             (
               equ[fun_set_contains[fun_reach[n.roops_core_objects_BinTreeNode_right,roops_core_objects_BinTreeNode,roops_core_objects_BinTreeNode_right+roops_core_objects_BinTreeNode_left],n],
                  false]
               and 
               equ[fun_set_contains[fun_reach[n.roops_core_objects_BinTreeNode_left,roops_core_objects_BinTreeNode,roops_core_objects_BinTreeNode_left+roops_core_objects_BinTreeNode_right],n],
                  false]
             )
   
   }

object_invariant
   all n:null+roops_core_objects_BinTreeNode | {
     equ[fun_set_contains[fun_reach[thiz.roops_core_objects_BinTree_root,roops_core_objects_BinTreeNode,roops_core_objects_BinTreeNode_left+roops_core_objects_BinTreeNode_right],n],
        true]
     implies 
             (
               (
                 neq[n.roops_core_objects_BinTreeNode_left,
                    null]
                 implies 
                         equ[(n.roops_core_objects_BinTreeNode_left).roops_core_objects_BinTreeNode_parent,
                            n]
               )
               and 
               (
                 neq[n.roops_core_objects_BinTreeNode_right,
                    null]
                 implies 
                         equ[(n.roops_core_objects_BinTreeNode_right).roops_core_objects_BinTreeNode_parent,
                            n]
               )
             )
   
   }



program roops_core_objects_BinTree::insert[
  var thiz:roops_core_objects_BinTree,
  var throw:java_lang_Throwable+null,
  var return:boolean,
  var k:Int] 
Specification 
{
  SpecCase #0 {
   requires {
      true=true
   }
   
   ensures {
      (
        throw'=null)
      implies 
              (
                (
                  all n:null+roops_core_objects_BinTreeNode | {
                    equ[fun_set_contains[fun_reach[thiz.roops_core_objects_BinTree_root,roops_core_objects_BinTreeNode,roops_core_objects_BinTreeNode_left+roops_core_objects_BinTreeNode_right],n],
                       true]
                    implies 
                            neq[n.roops_core_objects_BinTreeNode_key',
                               k']
                  
                  }
                )
                implies 
                        equ[thiz'.roops_core_objects_BinTree_size',
                           add[thiz.roops_core_objects_BinTree_size,1]]
              )
   }
   
   ensures {
      (
        throw'=null)
      implies 
              (
                (
                  some n:null+roops_core_objects_BinTreeNode | {
                    equ[fun_set_contains[fun_reach[thiz.roops_core_objects_BinTree_root,roops_core_objects_BinTreeNode,roops_core_objects_BinTreeNode_left+roops_core_objects_BinTreeNode_right],n],
                       true]
                    and 
                    equ[n.roops_core_objects_BinTreeNode_key',
                       k']
                  
                  }
                )
                implies 
                        equ[thiz'.roops_core_objects_BinTree_size',
                           thiz.roops_core_objects_BinTree_size]
              )
   }
   
   modifies {
   EVERYTHING}
  }
}
Implementation 

   {
      skip;
      {
         throw:=null;
         var exit_stmt_reached:boolean;
         exit_stmt_reached:=false;
         {
            var param_k_0:Int;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               param_k_0:=k;
            } else {
               skip;
            };
            var t_3:null+roops_core_objects_BinTreeNode;
            var t_5:boolean;
            var var_1_y:null+roops_core_objects_BinTreeNode;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               var_1_y:=((null+roops_core_objects_BinTreeNode) & (null));
            } else {
               skip;
            };
            var var_2_x:null+roops_core_objects_BinTreeNode;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[thiz]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  var_2_x:=thiz.roops_core_objects_BinTree_root;
               };
            } else {
               skip;
            };
            var var_3_ws_1:boolean;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               var_3_ws_1:=(neq[var_2_x.roops_core_objects_BinTreeNode_left,
                  null]=>(true)else(false));
            } else {
               skip;
            };
            while liftExpression[var_3_ws_1]
            and 
            (
              throw=null)
            and 
            (
              exit_stmt_reached=false)
            
               {
                  var t_2:boolean;
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     var_1_y:=var_2_x;
                  } else {
                     skip;
                  };
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     t_2:=(lt[param_k_0,
                       var_2_x.roops_core_objects_BinTreeNode_key]=>(true)else(false));
                  } else {
                     skip;
                  };
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     if t_2=true{
                        if (
                          throw=null)
                        and 
                        (
                          exit_stmt_reached=false){
                           if isEmptyOrNull[var_2_x]{
                              throw:=java_lang_NullPointerExceptionLit;
                           } else {
                              var_2_x:=var_2_x.roops_core_objects_BinTreeNode_left;
                           };
                        } else {
                           skip;
                        };
                     } else    {
                           var t_1:boolean;
                           if (
                             throw=null)
                           and 
                           (
                             exit_stmt_reached=false){
                              t_1:=(gt[param_k_0,
                                var_2_x.roops_core_objects_BinTreeNode_key]=>(true)else(false));
                           } else {
                              skip;
                           };
                           if (
                             throw=null)
                           and 
                           (
                             exit_stmt_reached=false){
                              if t_1=true{
                                 if (
                                   throw=null)
                                 and 
                                 (
                                   exit_stmt_reached=false){
                                    if isEmptyOrNull[var_2_x]{
                                       throw:=java_lang_NullPointerExceptionLit;
                                    } else {
                                       var_2_x:=var_2_x.roops_core_objects_BinTreeNode_right;
                                    };
                                 } else {
                                    skip;
                                 };
                              } else {
                                 if (
                                   throw=null)
                                 and 
                                 (
                                   exit_stmt_reached=false)   {
                                       return:=false;
                                       exit_stmt_reached:=true;
                                    
                                    }
                                  else {
                                    skip;
                                 };
                              };
                           } else {
                              skip;
                           };
                        
                        }
                     ;
                  } else {
                     skip;
                  };
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     var_3_ws_1:=(neq[var_2_x.roops_core_objects_BinTreeNode_left,
                        null]=>(true)else(false));
                  } else {
                     skip;
                  };
               
               }
            ;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false)   {
                  createObject<roops_core_objects_BinTreeNode>[t_3];
                  if isEmptyOrNull[t_3]{
                     throw:=java_lang_NullPointerExceptionLit;
                  } else {
                     call Constructor[t_3,throw];
                  };
               
               }
             else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               var_2_x:=t_3;
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[var_2_x]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  var_2_x.roops_core_objects_BinTreeNode_key:=param_k_0;
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               t_5:=(equ[var_1_y,
                  null]=>(true)else(false));
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if t_5=true{
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     if isEmptyOrNull[thiz]{
                        throw:=java_lang_NullPointerExceptionLit;
                     } else {
                        thiz.roops_core_objects_BinTree_root:=var_2_x;
                     };
                  } else {
                     skip;
                  };
               } else    {
                     var t_4:boolean;
                     if (
                       throw=null)
                     and 
                     (
                       exit_stmt_reached=false){
                        t_4:=(lt[param_k_0,
                          var_1_y.roops_core_objects_BinTreeNode_key]=>(true)else(false));
                     } else {
                        skip;
                     };
                     if (
                       throw=null)
                     and 
                     (
                       exit_stmt_reached=false){
                        if t_4=true{
                           if (
                             throw=null)
                           and 
                           (
                             exit_stmt_reached=false){
                              if isEmptyOrNull[var_1_y]{
                                 throw:=java_lang_NullPointerExceptionLit;
                              } else {
                                 var_1_y.roops_core_objects_BinTreeNode_left:=var_2_x;
                              };
                           } else {
                              skip;
                           };
                        } else {
                           if (
                             throw=null)
                           and 
                           (
                             exit_stmt_reached=false){
                              if isEmptyOrNull[var_1_y]{
                                 throw:=java_lang_NullPointerExceptionLit;
                              } else {
                                 var_1_y.roops_core_objects_BinTreeNode_right:=var_2_x;
                              };
                           } else {
                              skip;
                           };
                        };
                     } else {
                        skip;
                     };
                  
                  }
               ;
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[var_2_x]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  var_2_x.roops_core_objects_BinTreeNode_parent:=var_1_y;
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false) lblpos if_1 {
               if isEmptyOrNull[thiz]
               or 
               isEmptyOrNull[thiz]
               {
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  thiz.roops_core_objects_BinTree_size:=add[thiz.roops_core_objects_BinTree_size,1];
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false)   {
                  return:=true;
                  exit_stmt_reached:=true;
               
               }
             else {
               skip;
            };
         
         }
      
      }
      skip;
   
   }


program roops_core_objects_BinTree::Constructor[
  var thiz:roops_core_objects_BinTree,
  var throw:java_lang_Throwable+null] 
Implementation 

   {
      skip;
      {
         throw:=null;
         var exit_stmt_reached:boolean;
         exit_stmt_reached:=false;
         {
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[thiz]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  thiz.roops_core_objects_BinTree_root:=((null+roops_core_objects_BinTreeNode) & (null));
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[thiz]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  thiz.roops_core_objects_BinTree_size:=0;
               };
            } else {
               skip;
            };
         
         }
      
      }
      skip;
   
   }



