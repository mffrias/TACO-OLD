sig roops_core_objects_avltree_base_AvlTree extends java_lang_Object {}
{}




pred postcondition_roops_core_objects_avltree_base_AvlTree_findMin_0[
  return':univ,
  roops_core_objects_avltree_base_AvlNode_element':univ->univ,
  roops_core_objects_avltree_base_AvlNode_left':univ->univ,
  roops_core_objects_avltree_base_AvlNode_right':univ->univ,
  roops_core_objects_avltree_base_AvlTree_root':univ->univ,
  thiz':univ,
  throw':univ
]{
   roops_core_objects_avltree_base_AvlTree_ensures[return',
                                                  roops_core_objects_avltree_base_AvlNode_element',
                                                  roops_core_objects_avltree_base_AvlNode_left',
                                                  roops_core_objects_avltree_base_AvlNode_right',
                                                  roops_core_objects_avltree_base_AvlTree_root',
                                                  thiz',
                                                  throw']
   and 
   (
     not (
       throw'=AssertionFailureLit)
   )

}

pred roops_core_objects_avltree_base_AvlTreeCondition5[
  var_3_n:univ
]{
   not (
     isEmptyOrNull[var_3_n])

}

pred roops_core_objects_avltree_base_AvlTreeCondition4[
  var_3_n:univ
]{
   isEmptyOrNull[var_3_n]

}

pred roops_core_objects_avltree_base_AvlTreeCondition6[
  exit_stmt_reached:univ,
  throw:univ,
  var_4_ws_2:univ
]{
   liftExpression[var_4_ws_2]
   and 
   (
     throw=null)
   and 
   (
     exit_stmt_reached=false)

}

pred roops_core_objects_avltree_base_AvlTreeCondition1[
  thiz:univ
]{
   not (
     isEmptyOrNull[thiz])

}

pred roops_core_objects_avltree_base_AvlTreeCondition3[
  exit_stmt_reached:univ,
  throw:univ
]{
   not (
     (
       throw=null)
     and 
     (
       exit_stmt_reached=false)
   )

}

pred roops_core_objects_avltree_base_AvlTreeCondition0[
  thiz:univ
]{
   isEmptyOrNull[thiz]

}

pred roops_core_objects_avltree_base_AvlTreeCondition2[
  exit_stmt_reached:univ,
  throw:univ
]{
   (
     throw=null)
   and 
   (
     exit_stmt_reached=false)

}

pred roops_core_objects_avltree_base_AvlTree_object_invariant[
  roops_core_objects_avltree_base_AvlNode_element:univ->univ,
  roops_core_objects_avltree_base_AvlNode_height:univ->univ,
  roops_core_objects_avltree_base_AvlNode_left:univ->univ,
  roops_core_objects_avltree_base_AvlNode_right:univ->univ,
  roops_core_objects_avltree_base_AvlTree_root:univ->univ,
  roops_core_objects_avltree_base_AvlTree_size:univ->univ,
  thiz:univ
]{
   (
     all x:null+roops_core_objects_avltree_base_AvlNode | {
       liftExpression[fun_set_contains[fun_reach[thiz.roops_core_objects_avltree_base_AvlTree_root,roops_core_objects_avltree_base_AvlNode,roops_core_objects_avltree_base_AvlNode_left+roops_core_objects_avltree_base_AvlNode_right],x]]
       implies 
               (
                 (
                   neq[x.roops_core_objects_avltree_base_AvlNode_left,
                      null]
                   and 
                   neq[x.roops_core_objects_avltree_base_AvlNode_right,
                      null]
                   and 
                   lte[(x.roops_core_objects_avltree_base_AvlNode_left).roops_core_objects_avltree_base_AvlNode_height,
                      (x.roops_core_objects_avltree_base_AvlNode_right).roops_core_objects_avltree_base_AvlNode_height]
                 )
                 implies 
                         (
                           equ[x.roops_core_objects_avltree_base_AvlNode_height,
                              add[(x.roops_core_objects_avltree_base_AvlNode_right).roops_core_objects_avltree_base_AvlNode_height,1]]
                           and 
                           lte[sub[(x.roops_core_objects_avltree_base_AvlNode_right).roops_core_objects_avltree_base_AvlNode_height,(x.roops_core_objects_avltree_base_AvlNode_left).roops_core_objects_avltree_base_AvlNode_height],
                              1]
                         )
               )
     
     }
   )
   and 
   (
     not (
       thiz.roops_core_objects_avltree_base_AvlTree_root=null)
   )
   and 
   (
     all x:null+roops_core_objects_avltree_base_AvlNode | {
       liftExpression[fun_set_contains[fun_reach[thiz.roops_core_objects_avltree_base_AvlTree_root,roops_core_objects_avltree_base_AvlNode,roops_core_objects_avltree_base_AvlNode_left+roops_core_objects_avltree_base_AvlNode_right],x]]
       implies 
               (
                 (
                   equ[x.roops_core_objects_avltree_base_AvlNode_left,
                      null]
                   and 
                   equ[x.roops_core_objects_avltree_base_AvlNode_right,
                      null]
                 )
                 implies 
                         equ[x.roops_core_objects_avltree_base_AvlNode_height,
                            0]
               )
     
     }
   )
   and 
   (
     all x:null+roops_core_objects_avltree_base_AvlNode | {
       liftExpression[fun_set_contains[fun_reach[thiz.roops_core_objects_avltree_base_AvlTree_root,roops_core_objects_avltree_base_AvlNode,roops_core_objects_avltree_base_AvlNode_left+roops_core_objects_avltree_base_AvlNode_right],x]]
       implies 
               (
                 (
                   neq[x.roops_core_objects_avltree_base_AvlNode_left,
                      null]
                   and 
                   neq[x.roops_core_objects_avltree_base_AvlNode_right,
                      null]
                   and 
                   gt[(x.roops_core_objects_avltree_base_AvlNode_left).roops_core_objects_avltree_base_AvlNode_height,
                     (x.roops_core_objects_avltree_base_AvlNode_right).roops_core_objects_avltree_base_AvlNode_height]
                 )
                 implies 
                         (
                           equ[x.roops_core_objects_avltree_base_AvlNode_height,
                              add[(x.roops_core_objects_avltree_base_AvlNode_left).roops_core_objects_avltree_base_AvlNode_height,1]]
                           and 
                           lte[sub[(x.roops_core_objects_avltree_base_AvlNode_left).roops_core_objects_avltree_base_AvlNode_height,(x.roops_core_objects_avltree_base_AvlNode_right).roops_core_objects_avltree_base_AvlNode_height],
                              1]
                         )
               )
     
     }
   )
   and 
   (
     all x:null+roops_core_objects_avltree_base_AvlNode | {
       liftExpression[fun_set_contains[fun_reach[thiz.roops_core_objects_avltree_base_AvlTree_root,roops_core_objects_avltree_base_AvlNode,roops_core_objects_avltree_base_AvlNode_left+roops_core_objects_avltree_base_AvlNode_right],x]]
       implies 
               (
                 equ[fun_set_contains[fun_reach[x.roops_core_objects_avltree_base_AvlNode_left,roops_core_objects_avltree_base_AvlNode,roops_core_objects_avltree_base_AvlNode_right+roops_core_objects_avltree_base_AvlNode_left],x],
                    false]
                 and 
                 equ[fun_set_contains[fun_reach[x.roops_core_objects_avltree_base_AvlNode_right,roops_core_objects_avltree_base_AvlNode,roops_core_objects_avltree_base_AvlNode_right+roops_core_objects_avltree_base_AvlNode_left],x],
                    false]
               )
     
     }
   )
   and 
   (
     all x:null+roops_core_objects_avltree_base_AvlNode | {
       liftExpression[fun_set_contains[fun_reach[thiz.roops_core_objects_avltree_base_AvlTree_root,roops_core_objects_avltree_base_AvlNode,roops_core_objects_avltree_base_AvlNode_left+roops_core_objects_avltree_base_AvlNode_right],x]]
       implies 
               (
                 (
                   neq[x.roops_core_objects_avltree_base_AvlNode_left,
                      null]
                   and 
                   equ[x.roops_core_objects_avltree_base_AvlNode_right,
                      null]
                 )
                 implies 
                         (
                           equ[x.roops_core_objects_avltree_base_AvlNode_height,
                              1]
                           and 
                           equ[(x.roops_core_objects_avltree_base_AvlNode_left).roops_core_objects_avltree_base_AvlNode_height,
                              0]
                         )
               )
     
     }
   )
   and 
   (
     all x:null+roops_core_objects_avltree_base_AvlNode | {
       liftExpression[fun_set_contains[fun_reach[thiz.roops_core_objects_avltree_base_AvlTree_root,roops_core_objects_avltree_base_AvlNode,roops_core_objects_avltree_base_AvlNode_left+roops_core_objects_avltree_base_AvlNode_right],x]]
       implies 
               (
                 (
                   all y:null+roops_core_objects_avltree_base_AvlNode | {
                     equ[fun_set_contains[fun_reach[x.roops_core_objects_avltree_base_AvlNode_left,roops_core_objects_avltree_base_AvlNode,roops_core_objects_avltree_base_AvlNode_right+roops_core_objects_avltree_base_AvlNode_left],y],
                        true]
                     implies 
                             lt[y.roops_core_objects_avltree_base_AvlNode_element,
                               x.roops_core_objects_avltree_base_AvlNode_element]
                   
                   }
                 )
                 and 
                 (
                   all y:null+roops_core_objects_avltree_base_AvlNode | {
                     equ[fun_set_contains[fun_reach[x.roops_core_objects_avltree_base_AvlNode_right,roops_core_objects_avltree_base_AvlNode,roops_core_objects_avltree_base_AvlNode_right+roops_core_objects_avltree_base_AvlNode_left],y],
                        true]
                     implies 
                             lt[x.roops_core_objects_avltree_base_AvlNode_element,
                               y.roops_core_objects_avltree_base_AvlNode_element]
                   
                   }
                 )
               )
     
     }
   )
   and 
   equ[thiz.roops_core_objects_avltree_base_AvlTree_size,
      fun_set_size[fun_reach[thiz.roops_core_objects_avltree_base_AvlTree_root,roops_core_objects_avltree_base_AvlNode,roops_core_objects_avltree_base_AvlNode_left+roops_core_objects_avltree_base_AvlNode_right]]]
   and 
   (
     all x:null+roops_core_objects_avltree_base_AvlNode | {
       liftExpression[fun_set_contains[fun_reach[thiz.roops_core_objects_avltree_base_AvlTree_root,roops_core_objects_avltree_base_AvlNode,roops_core_objects_avltree_base_AvlNode_left+roops_core_objects_avltree_base_AvlNode_right],x]]
       implies 
               (
                 (
                   equ[x.roops_core_objects_avltree_base_AvlNode_left,
                      null]
                   and 
                   neq[x.roops_core_objects_avltree_base_AvlNode_right,
                      null]
                 )
                 implies 
                         (
                           equ[x.roops_core_objects_avltree_base_AvlNode_height,
                              1]
                           and 
                           equ[(x.roops_core_objects_avltree_base_AvlNode_right).roops_core_objects_avltree_base_AvlNode_height,
                              0]
                         )
               )
     
     }
   )

}

pred precondition_roops_core_objects_avltree_base_AvlTree_findMin_0[
  roops_core_objects_avltree_base_AvlNode_element:univ->univ,
  roops_core_objects_avltree_base_AvlNode_height:univ->univ,
  roops_core_objects_avltree_base_AvlNode_left:univ->univ,
  roops_core_objects_avltree_base_AvlNode_right:univ->univ,
  roops_core_objects_avltree_base_AvlTree_root:univ->univ,
  roops_core_objects_avltree_base_AvlTree_size:univ->univ,
  thiz:univ,
  throw:univ
]{
   roops_core_objects_avltree_base_AvlTree_object_invariant[roops_core_objects_avltree_base_AvlNode_element,
                                                           roops_core_objects_avltree_base_AvlNode_height,
                                                           roops_core_objects_avltree_base_AvlNode_left,
                                                           roops_core_objects_avltree_base_AvlNode_right,
                                                           roops_core_objects_avltree_base_AvlTree_root,
                                                           roops_core_objects_avltree_base_AvlTree_size,
                                                           thiz]
   and 
   equ[throw,
      null]
   and 
   roops_core_objects_avltree_base_AvlTree_requires[roops_core_objects_avltree_base_AvlTree_root,
                                                   thiz]

}

pred roops_core_objects_avltree_base_AvlTree_requires[
  roops_core_objects_avltree_base_AvlTree_root:univ->univ,
  thiz:univ
]{
   neq[thiz.roops_core_objects_avltree_base_AvlTree_root,
      null]

}

pred roops_core_objects_avltree_base_AvlTree_ensures[
  return':univ,
  roops_core_objects_avltree_base_AvlNode_element':univ->univ,
  roops_core_objects_avltree_base_AvlNode_left':univ->univ,
  roops_core_objects_avltree_base_AvlNode_right':univ->univ,
  roops_core_objects_avltree_base_AvlTree_root':univ->univ,
  thiz':univ,
  throw':univ
]{
   (
     instanceOf[throw',
               java_lang_Exception]
     implies 
             liftExpression[false]
   )
   and 
   (
     (
       throw'=null)
     implies 
             (
               some min_node:null+roops_core_objects_avltree_base_AvlNode | {
                 liftExpression[fun_set_contains[fun_reach[thiz'.roops_core_objects_avltree_base_AvlTree_root',roops_core_objects_avltree_base_AvlNode,roops_core_objects_avltree_base_AvlNode_left'+roops_core_objects_avltree_base_AvlNode_right'],min_node]]
                 and 
                 equ[min_node.roops_core_objects_avltree_base_AvlNode_element',
                    return']
                 and 
                 (
                   all node:null+roops_core_objects_avltree_base_AvlNode | {
                     liftExpression[fun_set_contains[fun_reach[thiz'.roops_core_objects_avltree_base_AvlTree_root',roops_core_objects_avltree_base_AvlNode,roops_core_objects_avltree_base_AvlNode_left'+roops_core_objects_avltree_base_AvlNode_right'],node]]
                     implies 
                             lte[return',
                                node.roops_core_objects_avltree_base_AvlNode_element']
                   
                   }
                 )
               
               }
             )
   )

}

program roops_core_objects_avltree_base_AvlTree_findMin_0[
  thiz:roops_core_objects_avltree_base_AvlTree,
  throw:java_lang_Throwable+null,
  return:Int,
  roops_core_objects_avltree_base_AvlNode_height:(roops_core_objects_avltree_base_AvlNode)->one(Int),
  roops_core_objects_avltree_base_AvlTree_root:(roops_core_objects_avltree_base_AvlTree)->one(null+roops_core_objects_avltree_base_AvlNode),
  roops_core_objects_avltree_base_AvlNode_element:(roops_core_objects_avltree_base_AvlNode)->one(Int),
  roops_core_objects_avltree_base_AvlTree_size:(roops_core_objects_avltree_base_AvlTree)->one(Int),
  roops_core_objects_avltree_base_AvlNode_left:(roops_core_objects_avltree_base_AvlNode)->one(null+roops_core_objects_avltree_base_AvlNode),
  roops_core_objects_avltree_base_AvlNode_right:(roops_core_objects_avltree_base_AvlNode)->one(null+roops_core_objects_avltree_base_AvlNode),
  usedObjects:set (java_lang_Object)
] var [
  exit_stmt_reached:boolean,
  var_3_n:null+roops_core_objects_avltree_base_AvlNode,
  var_4_ws_2:boolean
]{
   skip;
   throw:=null;
   skip;
   exit_stmt_reached:=false;
   skip;
   if roops_core_objects_avltree_base_AvlTreeCondition2[exit_stmt_reached,throw]  {
      if roops_core_objects_avltree_base_AvlTreeCondition0[thiz]  {
         throw:=java_lang_NullPointerExceptionLit
      
      } else {
         var_3_n:=thiz.roops_core_objects_avltree_base_AvlTree_root
      
      }
   
   } else {
      skip
   
   }
   ;
   skip;
   if roops_core_objects_avltree_base_AvlTreeCondition2[exit_stmt_reached,throw]  {
      var_4_ws_2:=(neq[var_3_n.roops_core_objects_avltree_base_AvlNode_left,null]=>(true)else(false))
   
   } else {
      skip
   
   }
   ;
   while roops_core_objects_avltree_base_AvlTreeCondition6[exit_stmt_reached,throw,var_4_ws_2]do {
      if roops_core_objects_avltree_base_AvlTreeCondition2[exit_stmt_reached,throw]  {
         if roops_core_objects_avltree_base_AvlTreeCondition4[var_3_n]  {
            throw:=java_lang_NullPointerExceptionLit
         
         } else {
            var_3_n:=var_3_n.roops_core_objects_avltree_base_AvlNode_left
         
         }
      
      } else {
         skip
      
      }
      ;
      if roops_core_objects_avltree_base_AvlTreeCondition2[exit_stmt_reached,throw]  {
         var_4_ws_2:=(neq[var_3_n.roops_core_objects_avltree_base_AvlNode_left,null]=>(true)else(false))
      
      } else {
         skip
      
      }
   
   }
   ;
   if roops_core_objects_avltree_base_AvlTreeCondition2[exit_stmt_reached,throw]  {
      if roops_core_objects_avltree_base_AvlTreeCondition4[var_3_n]  {
         throw:=java_lang_NullPointerExceptionLit
      
      } else {
         return:=var_3_n.roops_core_objects_avltree_base_AvlNode_element
      
      }
      ;
      exit_stmt_reached:=true
   
   } else {
      skip
   
   }
   ;
   skip

}

assertCorrectness check_roops_core_objects_avltree_base_AvlTree_findMin_0[
  exit_stmt_reached:boolean,
  return:Int,
  roops_core_objects_avltree_base_AvlNode_element:(roops_core_objects_avltree_base_AvlNode)->one(Int),
  roops_core_objects_avltree_base_AvlNode_height:(roops_core_objects_avltree_base_AvlNode)->one(Int),
  roops_core_objects_avltree_base_AvlNode_left:(roops_core_objects_avltree_base_AvlNode)->one(null+roops_core_objects_avltree_base_AvlNode),
  roops_core_objects_avltree_base_AvlNode_right:(roops_core_objects_avltree_base_AvlNode)->one(null+roops_core_objects_avltree_base_AvlNode),
  roops_core_objects_avltree_base_AvlTree_root:(roops_core_objects_avltree_base_AvlTree)->one(null+roops_core_objects_avltree_base_AvlNode),
  roops_core_objects_avltree_base_AvlTree_size:(roops_core_objects_avltree_base_AvlTree)->one(Int),
  thiz:roops_core_objects_avltree_base_AvlTree,
  throw:java_lang_Throwable+null,
  usedObjects:set (java_lang_Object),
  var_3_n:null+roops_core_objects_avltree_base_AvlNode,
  var_4_ws_2:boolean
]{
pre={
   precondition_roops_core_objects_avltree_base_AvlTree_findMin_0[roops_core_objects_avltree_base_AvlNode_element,
                                                                 roops_core_objects_avltree_base_AvlNode_height,
                                                                 roops_core_objects_avltree_base_AvlNode_left,
                                                                 roops_core_objects_avltree_base_AvlNode_right,
                                                                 roops_core_objects_avltree_base_AvlTree_root,
                                                                 roops_core_objects_avltree_base_AvlTree_size,
                                                                 thiz,
                                                                 throw]

}
program={
   call roops_core_objects_avltree_base_AvlTree_findMin_0[thiz,throw,return,roops_core_objects_avltree_base_AvlNode_height,roops_core_objects_avltree_base_AvlTree_root,roops_core_objects_avltree_base_AvlNode_element,roops_core_objects_avltree_base_AvlTree_size,roops_core_objects_avltree_base_AvlNode_left,roops_core_objects_avltree_base_AvlNode_right,usedObjects]

}
post={
   postcondition_roops_core_objects_avltree_base_AvlTree_findMin_0[return',
                                                                  roops_core_objects_avltree_base_AvlNode_element',
                                                                  roops_core_objects_avltree_base_AvlNode_left',
                                                                  roops_core_objects_avltree_base_AvlNode_right',
                                                                  roops_core_objects_avltree_base_AvlTree_root',
                                                                  thiz',
                                                                  throw']

}
}

