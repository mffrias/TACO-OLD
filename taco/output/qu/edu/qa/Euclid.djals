//-------------- qu_edu_qa_Euclid --------------//
module qu_edu_qa_Euclid
sig qu_edu_qa_Euclid extends java_lang_Object {}
{}
program qu_edu_qa_Euclid::Constructor[
  var thiz:qu_edu_qa_Euclid,
  var throw:java_lang_Throwable+null] 
Implementation 

   {
      skip;
      {
         throw:=null;
         var exit_stmt_reached:boolean;
         exit_stmt_reached:=false;
         skip;
      
      }
      skip;
   
   }


program qu_edu_qa_Euclid::Euclides[
  var thiz:qu_edu_qa_Euclid,
  var throw:java_lang_Throwable+null,
  var return:JavaPrimitiveIntegerValue,
  var n1:JavaPrimitiveIntegerValue,
  var n2:JavaPrimitiveIntegerValue,
  var SK_jml_pred_java_primitive_integer_value_mul_ARG_overflow_0:boolean,
  var SK_jml_pred_java_primitive_integer_value_mul_ARG_result_0:JavaPrimitiveIntegerValue] 
Specification 
{
  SpecCase #0 {
   requires {
      true=true
   }
   
   ensures {
      (
        throw'=null)
      implies 
              (
                some n:JavaPrimitiveIntegerValue | {
                  pred_java_primitive_integer_value_lt[JavaPrimitiveIntegerLiteral0,
                                                      n]
                  and 
                  pred_java_primitive_integer_value_lte[n,
                                                       n1']
                  and 
                  equ[SK_jml_pred_java_primitive_integer_value_mul_ARG_result_0,
                     n1']
                
                }
              )
   }
   
   modifies {
   EVERYTHING}
  }
}
Implementation 

   {
      skip;
      {
         throw:=null;
         var exit_stmt_reached:boolean;
         exit_stmt_reached:=false;
         {
            var t_1:JavaPrimitiveIntegerValue;
            var SK_pred_java_primitive_integer_value_div_rem_ARG_left_0:JavaPrimitiveIntegerValue;
            var SK_pred_java_primitive_integer_value_div_rem_ARG_right_0:JavaPrimitiveIntegerValue;
            var SK_pred_java_primitive_integer_value_div_rem_ARG_result_0:JavaPrimitiveIntegerValue;
            var SK_pred_java_primitive_integer_value_div_rem_ARG_remainder_0:JavaPrimitiveIntegerValue;
            havoc SK_pred_java_primitive_integer_value_div_rem_ARG_left_0;
            havoc SK_pred_java_primitive_integer_value_div_rem_ARG_right_0;
            havoc SK_pred_java_primitive_integer_value_div_rem_ARG_result_0;
            havoc SK_pred_java_primitive_integer_value_div_rem_ARG_remainder_0;
            assume equ[SK_pred_java_primitive_integer_value_div_rem_ARG_left_0,
               n1];
            assume equ[SK_pred_java_primitive_integer_value_div_rem_ARG_right_0,
               n2];
            assume pred_java_primitive_integer_value_div_rem_marker[SK_pred_java_primitive_integer_value_div_rem_ARG_left_0,
                                                            SK_pred_java_primitive_integer_value_div_rem_ARG_right_0,
                                                            SK_pred_java_primitive_integer_value_div_rem_ARG_result_0,
                                                            SK_pred_java_primitive_integer_value_div_rem_ARG_remainder_0];
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               t_1:=SK_pred_java_primitive_integer_value_div_rem_ARG_remainder_0;
            } else {
               skip;
            };
            var var_1_r:JavaPrimitiveIntegerValue;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               var_1_r:=t_1;
            } else {
               skip;
            };
            var var_2_ws_1:boolean;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               var_2_ws_1:=(neq[var_1_r,
                  JavaPrimitiveIntegerLiteral0]=>(true)else(false));
            } else {
               skip;
            };
            while liftExpression[var_2_ws_1]
            and 
            (
              throw=null)
            and 
            (
              exit_stmt_reached=false)
            
               {
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     n1:=n2;
                  } else {
                     skip;
                  };
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     n2:=var_1_r;
                  } else {
                     skip;
                  };
                  var SK_pred_java_primitive_integer_value_div_rem_ARG_left_1:JavaPrimitiveIntegerValue;
                  var SK_pred_java_primitive_integer_value_div_rem_ARG_right_1:JavaPrimitiveIntegerValue;
                  var SK_pred_java_primitive_integer_value_div_rem_ARG_result_1:JavaPrimitiveIntegerValue;
                  var SK_pred_java_primitive_integer_value_div_rem_ARG_remainder_1:JavaPrimitiveIntegerValue;
                  havoc SK_pred_java_primitive_integer_value_div_rem_ARG_left_1;
                  havoc SK_pred_java_primitive_integer_value_div_rem_ARG_right_1;
                  havoc SK_pred_java_primitive_integer_value_div_rem_ARG_result_1;
                  havoc SK_pred_java_primitive_integer_value_div_rem_ARG_remainder_1;
                  assume equ[SK_pred_java_primitive_integer_value_div_rem_ARG_left_1,
                     n1];
                  assume equ[SK_pred_java_primitive_integer_value_div_rem_ARG_right_1,
                     n2];
                  assume pred_java_primitive_integer_value_div_rem_marker[SK_pred_java_primitive_integer_value_div_rem_ARG_left_1,
                                                                  SK_pred_java_primitive_integer_value_div_rem_ARG_right_1,
                                                                  SK_pred_java_primitive_integer_value_div_rem_ARG_result_1,
                                                                  SK_pred_java_primitive_integer_value_div_rem_ARG_remainder_1];
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     var_1_r:=SK_pred_java_primitive_integer_value_div_rem_ARG_remainder_1;
                  } else {
                     skip;
                  };
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     var_2_ws_1:=(neq[var_1_r,
                        JavaPrimitiveIntegerLiteral0]=>(true)else(false));
                  } else {
                     skip;
                  };
               
               }
            ;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false)   {
                  return:=n2;
                  exit_stmt_reached:=true;
               
               }
             else {
               skip;
            };
         
         }
      
      }
      skip;
   
   }



