//-------------- modelfields_TreeSet --------------//
module modelfields_TreeSet
sig modelfields_TreeSet extends java_lang_Object {}
{}
field modelfields_TreeSet_root:(modelfields_TreeSet)->one(modelfields_TreeSetEntry+null) {}
field modelfields_TreeSet_size:(modelfields_TreeSet)->one(Int) {}
field modelfields_TreeSet_modCount:(modelfields_TreeSet)->one(Int) {}
field modelfields_TreeSet_RED:(modelfields_TreeSet)->one(boolean) {}
field modelfields_TreeSet_BLACK:(modelfields_TreeSet)->one(boolean) {}

object_invariant
   equ[thiz.modelfields_TreeSet_size,
      fun_set_size[fun_reach[thiz.modelfields_TreeSet_root,modelfields_TreeSetEntry,modelfields_TreeSetEntry_left+modelfields_TreeSetEntry_right]]]

object_invariant
   equ[thiz.modelfields_TreeSet_RED,
      false]
   and 
   equ[thiz.modelfields_TreeSet_BLACK,
      true]
   and 
   equ[(thiz.modelfields_TreeSet_root).modelfields_TreeSetEntry_parent,
      null]
   and 
   (
     neq[thiz.modelfields_TreeSet_root,
        null]
     implies 
             equ[(thiz.modelfields_TreeSet_root).modelfields_TreeSetEntry_color,
                thiz.modelfields_TreeSet_BLACK]
   )
   and 
   (
     all n:modelfields_TreeSetEntry+null | {
       liftExpression[fun_set_contains[fun_reach[thiz.modelfields_TreeSet_root,modelfields_TreeSetEntry,modelfields_TreeSetEntry_left+modelfields_TreeSetEntry_right],n]]
       implies 
               (
                 (
                   neq[n.modelfields_TreeSetEntry_left,
                      null]
                   implies 
                           equ[(n.modelfields_TreeSetEntry_left).modelfields_TreeSetEntry_parent,
                              n]
                 )
                 and 
                 (
                   neq[n.modelfields_TreeSetEntry_right,
                      null]
                   implies 
                           equ[(n.modelfields_TreeSetEntry_right).modelfields_TreeSetEntry_parent,
                              n]
                 )
                 and 
                 (
                   neq[n.modelfields_TreeSetEntry_parent,
                      null]
                   implies 
                           (
                             equ[(n.modelfields_TreeSetEntry_parent).modelfields_TreeSetEntry_left,
                                n]
                             or 
                             equ[(n.modelfields_TreeSetEntry_parent).modelfields_TreeSetEntry_right,
                                n]
                           )
                 )
                 and 
                 equ[fun_set_contains[fun_reach[n.modelfields_TreeSetEntry_parent,modelfields_TreeSetEntry,modelfields_TreeSetEntry_parent],n],
                    false]
                 and 
                 (
                   all x:modelfields_TreeSetEntry+null | {
                     liftExpression[fun_set_contains[fun_reach[n.modelfields_TreeSetEntry_left,modelfields_TreeSetEntry,modelfields_TreeSetEntry_left+modelfields_TreeSetEntry_right],x]]
                     implies 
                             gt[n.modelfields_TreeSetEntry_key,
                               x.modelfields_TreeSetEntry_key]
                   
                   }
                 )
                 and 
                 (
                   all x:modelfields_TreeSetEntry+null | {
                     liftExpression[fun_set_contains[fun_reach[n.modelfields_TreeSetEntry_right,modelfields_TreeSetEntry,modelfields_TreeSetEntry_left+modelfields_TreeSetEntry_right],x]]
                     implies 
                             gt[x.modelfields_TreeSetEntry_key,
                               n.modelfields_TreeSetEntry_key]
                   
                   }
                 )
                 and 
                 (
                   (
                     equ[n.modelfields_TreeSetEntry_color,
                        thiz.modelfields_TreeSet_RED]
                     and 
                     neq[n.modelfields_TreeSetEntry_parent,
                        null]
                   )
                   implies 
                           equ[(n.modelfields_TreeSetEntry_parent).modelfields_TreeSetEntry_color,
                              thiz.modelfields_TreeSet_BLACK]
                 )
               )
     
     }
   )



program modelfields_TreeSet::getEntry[
  var thiz:modelfields_TreeSet,
  var throw:java_lang_Throwable+null,
  var return:modelfields_TreeSetEntry+null,
  var key:Int] 
Implementation 

   {
      skip;
      {
         throw:=null;
         var exit_stmt_reached:boolean;
         exit_stmt_reached:=false;
         {
            var param_key_1:Int;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               param_key_1:=key;
            } else {
               skip;
            };
            var var_3_p:modelfields_TreeSetEntry+null;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[thiz]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  var_3_p:=thiz.modelfields_TreeSet_root;
               };
            } else {
               skip;
            };
            var var_4_ws_2:boolean;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               var_4_ws_2:=(neq[var_3_p,
                  null]=>(true)else(false));
            } else {
               skip;
            };
            while liftExpression[var_4_ws_2]
            and 
            (
              throw=null)
            and 
            (
              exit_stmt_reached=false)
            
               {
                  var t_4:boolean;
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     t_4:=(equ[param_key_1,
                        var_3_p.modelfields_TreeSetEntry_key]=>(true)else(false));
                  } else {
                     skip;
                  };
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     if t_4=true{
                        if (
                          throw=null)
                        and 
                        (
                          exit_stmt_reached=false)   {
                              return:=var_3_p;
                              exit_stmt_reached:=true;
                           
                           }
                         else {
                           skip;
                        };
                     } else    {
                           var t_3:boolean;
                           if (
                             throw=null)
                           and 
                           (
                             exit_stmt_reached=false){
                              t_3:=(lt[param_key_1,
                                var_3_p.modelfields_TreeSetEntry_key]=>(true)else(false));
                           } else {
                              skip;
                           };
                           if (
                             throw=null)
                           and 
                           (
                             exit_stmt_reached=false){
                              if t_3=true{
                                 if (
                                   throw=null)
                                 and 
                                 (
                                   exit_stmt_reached=false){
                                    if isEmptyOrNull[var_3_p]{
                                       throw:=java_lang_NullPointerExceptionLit;
                                    } else {
                                       var_3_p:=var_3_p.modelfields_TreeSetEntry_left;
                                    };
                                 } else {
                                    skip;
                                 };
                              } else {
                                 if (
                                   throw=null)
                                 and 
                                 (
                                   exit_stmt_reached=false){
                                    if isEmptyOrNull[var_3_p]{
                                       throw:=java_lang_NullPointerExceptionLit;
                                    } else {
                                       var_3_p:=var_3_p.modelfields_TreeSetEntry_right;
                                    };
                                 } else {
                                    skip;
                                 };
                              };
                           } else {
                              skip;
                           };
                        
                        }
                     ;
                  } else {
                     skip;
                  };
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     var_4_ws_2:=(neq[var_3_p,
                        null]=>(true)else(false));
                  } else {
                     skip;
                  };
               
               }
            ;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false)   {
                  return:=((modelfields_TreeSetEntry+null) & (null));
                  exit_stmt_reached:=true;
               
               }
             else {
               skip;
            };
         
         }
      
      }
      skip;
   
   }


program modelfields_TreeSet::contains[
  var thiz:modelfields_TreeSet,
  var throw:java_lang_Throwable+null,
  var return:boolean,
  var value:Int] 
Specification 
{
  SpecCase #0 {
   requires {
      neq[thiz.modelfields_TreeSet_root,
         null]
   }
   
   ensures {
      instanceOf[throw',
                java_lang_Exception]
      implies 
              liftExpression[false]
   }
   
   ensures {
      (
        throw'=null)
      implies 
              (
                all e:modelfields_TreeSetEntry+null | {
                  liftExpression[fun_set_contains[fun_reach[thiz'.modelfields_TreeSet_root',modelfields_TreeSetEntry,modelfields_TreeSetEntry_left'+modelfields_TreeSetEntry_right'],e]]
                  implies 
                          (
                            equ[e.modelfields_TreeSetEntry_left',
                               e.modelfields_TreeSetEntry_left]
                            and 
                            equ[e.modelfields_TreeSetEntry_right',
                               e.modelfields_TreeSetEntry_right]
                            and 
                            equ[e.modelfields_TreeSetEntry_color',
                               e.modelfields_TreeSetEntry_color]
                            and 
                            equ[e.modelfields_TreeSetEntry_key',
                               e.modelfields_TreeSetEntry_key]
                          )
                
                }
              )
   }
   
   ensures {
      (
        throw'=null)
      implies 
              (
                (
                  equ[return',
                     true]
                  implies 
                          (
                            some e:modelfields_TreeSetEntry+null | {
                              liftExpression[fun_set_contains[fun_reach[thiz'.modelfields_TreeSet_root',modelfields_TreeSetEntry,modelfields_TreeSetEntry_left'+modelfields_TreeSetEntry_right'],e]]
                              and 
                              equ[e.modelfields_TreeSetEntry_key',
                                 value']
                            
                            }
                          )
                )
                and 
                (
                  (
                    some e:modelfields_TreeSetEntry+null | {
                      liftExpression[fun_set_contains[fun_reach[thiz'.modelfields_TreeSet_root',modelfields_TreeSetEntry,modelfields_TreeSetEntry_left'+modelfields_TreeSetEntry_right'],e]]
                      and 
                      equ[e.modelfields_TreeSetEntry_key',
                         value']
                    
                    }
                  )
                  implies 
                          equ[return',
                             true]
                )
              )
   }
   
   modifies {
   EVERYTHING}
  }
}
Implementation 

   {
      skip;
      {
         throw:=null;
         var exit_stmt_reached:boolean;
         exit_stmt_reached:=false;
         {
            var param_value_0:Int;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               param_value_0:=value;
            } else {
               skip;
            };
            var var_1_p:modelfields_TreeSetEntry+null;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[thiz]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  var_1_p:=thiz.modelfields_TreeSet_root;
               };
            } else {
               skip;
            };
            var var_2_ws_1:boolean;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               var_2_ws_1:=(neq[var_1_p,
                  null]=>(true)else(false));
            } else {
               skip;
            };
            while liftExpression[var_2_ws_1]
            and 
            (
              throw=null)
            and 
            (
              exit_stmt_reached=false)
            
               {
                  var variant_0:Int;
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     if isEmptyOrNull[thiz]{
                        throw:=java_lang_NullPointerExceptionLit;
                     } else {
                        variant_0:=fun_set_size[fun_reach[thiz.modelfields_TreeSet_root,modelfields_TreeSetEntry,modelfields_TreeSetEntry_left+modelfields_TreeSetEntry_right]];
                     };
                  } else {
                     skip;
                  };
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     if isEmptyOrNull[thiz]{
                        throw:=java_lang_NullPointerExceptionLit;
                     } else {
                        if lt[fun_set_size[fun_reach[thiz.modelfields_TreeSet_root,modelfields_TreeSetEntry,modelfields_TreeSetEntry_left+modelfields_TreeSetEntry_right]],
                          0]   {
                              createObject<java_lang_Object>[throw];
                              if isEmptyOrNull[throw]{
                                 throw:=java_lang_NullPointerExceptionLit;
                              } else {
                                 call Constructor[throw,throw];
                              };
                           
                           }
                         else {
                           skip;
                        };
                     };
                  } else {
                     skip;
                  };
                  var t_2:boolean;
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     t_2:=(equ[value,
                        var_1_p.modelfields_TreeSetEntry_key]=>(true)else(false));
                  } else {
                     skip;
                  };
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     if t_2=true{
                        if (
                          throw=null)
                        and 
                        (
                          exit_stmt_reached=false)   {
                              return:=true;
                              exit_stmt_reached:=true;
                           
                           }
                         else {
                           skip;
                        };
                     } else    {
                           var t_1:boolean;
                           if (
                             throw=null)
                           and 
                           (
                             exit_stmt_reached=false){
                              t_1:=(lt[value,
                                var_1_p.modelfields_TreeSetEntry_key]=>(true)else(false));
                           } else {
                              skip;
                           };
                           if (
                             throw=null)
                           and 
                           (
                             exit_stmt_reached=false){
                              if t_1=true{
                                 if (
                                   throw=null)
                                 and 
                                 (
                                   exit_stmt_reached=false){
                                    if isEmptyOrNull[var_1_p]{
                                       throw:=java_lang_NullPointerExceptionLit;
                                    } else {
                                       var_1_p:=var_1_p.modelfields_TreeSetEntry_left;
                                    };
                                 } else {
                                    skip;
                                 };
                              } else {
                                 if (
                                   throw=null)
                                 and 
                                 (
                                   exit_stmt_reached=false){
                                    if isEmptyOrNull[var_1_p]{
                                       throw:=java_lang_NullPointerExceptionLit;
                                    } else {
                                       var_1_p:=var_1_p.modelfields_TreeSetEntry_right;
                                    };
                                 } else {
                                    skip;
                                 };
                              };
                           } else {
                              skip;
                           };
                        
                        }
                     ;
                  } else {
                     skip;
                  };
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     var_2_ws_1:=(neq[var_1_p,
                        null]=>(true)else(false));
                  } else {
                     skip;
                  };
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     if isEmptyOrNull[thiz]{
                        throw:=java_lang_NullPointerExceptionLit;
                     } else {
                        if gte[fun_set_size[fun_reach[thiz.modelfields_TreeSet_root,modelfields_TreeSetEntry,modelfields_TreeSetEntry_left+modelfields_TreeSetEntry_right]],
                           variant_0]   {
                              createObject<java_lang_Object>[throw];
                              if isEmptyOrNull[throw]{
                                 throw:=java_lang_NullPointerExceptionLit;
                              } else {
                                 call Constructor[throw,throw];
                              };
                           
                           }
                         else {
                           skip;
                        };
                     };
                  } else {
                     skip;
                  };
               
               }
            ;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false)   {
                  return:=false;
                  exit_stmt_reached:=true;
               
               }
             else {
               skip;
            };
         
         }
      
      }
      skip;
   
   }


program modelfields_TreeSet::Constructor[
  var thiz:modelfields_TreeSet,
  var throw:java_lang_Throwable+null] 
Implementation 

   {
      skip;
      {
         throw:=null;
         var exit_stmt_reached:boolean;
         exit_stmt_reached:=false;
         {
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[thiz]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  thiz.modelfields_TreeSet_root:=((modelfields_TreeSetEntry+null) & (null));
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[thiz]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  thiz.modelfields_TreeSet_size:=0;
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[thiz]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  thiz.modelfields_TreeSet_modCount:=0;
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[thiz]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  thiz.modelfields_TreeSet_RED:=false;
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[thiz]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  thiz.modelfields_TreeSet_BLACK:=true;
               };
            } else {
               skip;
            };
         
         }
      
      }
      skip;
   
   }



