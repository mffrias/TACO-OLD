//-------------- ar_edu_taco_skunk_Landing --------------//
module ar_edu_taco_skunk_Landing
sig ar_edu_taco_skunk_Landing extends java_lang_Object {}
{}
program ar_edu_taco_skunk_Landing::initLandingOK[
  var throw:java_lang_Throwable+null,
  var return:boolean,
  var height:JavaPrimitiveFloatValue] 
Specification 
{
  SpecCase #0 {
   requires {
      true=true
   }
   
   ensures {
      instanceOf[throw',
                java_lang_Exception]
      implies 
              liftExpression[false]
   }
   
   ensures {
      (
        throw'=null)
      implies 
              liftExpression[true]
   }
   
   modifies {
   EVERYTHING}
  }
}
Implementation 

   {
      skip;
      {
         throw:=null;
         var exit_stmt_reached:boolean;
         exit_stmt_reached:=false;
         {
            var t_3:java_lang_Boolean+null;
            var t_4:boolean;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               call ar_edu_taco_skunk_Landing_isHeightPositive[throw,t_3,height];
            } else {
               skip;
            };
            var var_2_b:java_lang_Boolean+null;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               var_2_b:=t_3;
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[var_2_b]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  call booleanValue[var_2_b,throw,t_4];
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false)   {
                  return:=t_4;
                  exit_stmt_reached:=true;
               
               }
             else {
               skip;
            };
         
         }
      
      }
      skip;
   
   }


program ar_edu_taco_skunk_Landing::Constructor[
  var thiz:ar_edu_taco_skunk_Landing,
  var throw:java_lang_Throwable+null] 
Implementation 

   {
      skip;
      {
         throw:=null;
         var exit_stmt_reached:boolean;
         exit_stmt_reached:=false;
         skip;
      
      }
      skip;
   
   }


program ar_edu_taco_skunk_Landing::testDivZero[
  var throw:java_lang_Throwable+null,
  var return:boolean,
  var i1:JavaPrimitiveIntegerValue,
  var i2:JavaPrimitiveIntegerValue,
  var i3:JavaPrimitiveIntegerValue] 
Specification 
{
  SpecCase #0 {
   requires {
      true=true
   }
   
   ensures {
      instanceOf[throw',
                java_lang_RuntimeException]
      implies 
              liftExpression[false]
   }
   
   ensures {
      (
        throw'=null)
      implies 
              equ[return',
                 true]
   }
   
   modifies {
   EVERYTHING}
  }
}
Implementation 

   {
      skip;
      {
         throw:=null;
         var exit_stmt_reached:boolean;
         exit_stmt_reached:=false;
         {
            var t_10:JavaPrimitiveIntegerValue;
            var auxVarForArithmeticExceptionDivisionByZeroJavaPrimitiveIntegerValue_0:JavaPrimitiveIntegerValue;
            havoc auxVarForArithmeticExceptionDivisionByZeroJavaPrimitiveIntegerValue_0;
            assume equ[auxVarForArithmeticExceptionDivisionByZeroJavaPrimitiveIntegerValue_0,
               i3];
            var SK_pred_java_primitive_integer_value_div_rem_ARG_left_1:JavaPrimitiveIntegerValue;
            var SK_pred_java_primitive_integer_value_div_rem_ARG_right_1:JavaPrimitiveIntegerValue;
            var SK_pred_java_primitive_integer_value_div_rem_ARG_result_1:JavaPrimitiveIntegerValue;
            var SK_pred_java_primitive_integer_value_div_rem_ARG_remainder_1:JavaPrimitiveIntegerValue;
            if pred_java_primitive_integer_value_eq[auxVarForArithmeticExceptionDivisionByZeroJavaPrimitiveIntegerValue_0,
                                                JavaPrimitiveIntegerLiteral0]   {
                  throw:=java_lang_ArithmeticExceptionLit;
                  {
                     havoc SK_pred_java_primitive_integer_value_div_rem_ARG_left_1;
                     havoc auxVarForArithmeticExceptionDivisionByZeroJavaPrimitiveIntegerValue_0;
                     havoc SK_pred_java_primitive_integer_value_div_rem_ARG_right_1;
                     havoc SK_pred_java_primitive_integer_value_div_rem_ARG_result_1;
                     havoc SK_pred_java_primitive_integer_value_div_rem_ARG_remainder_1;
                     assume equ[SK_pred_java_primitive_integer_value_div_rem_ARG_left_1,
                        i2];
                     assume equ[auxVarForArithmeticExceptionDivisionByZeroJavaPrimitiveIntegerValue_0,
                        i3];
                     assume equ[SK_pred_java_primitive_integer_value_div_rem_ARG_right_1,
                        JavaPrimitiveIntegerLiteral1];
                     assume pred_java_primitive_integer_value_div_rem_marker[SK_pred_java_primitive_integer_value_div_rem_ARG_left_1,
                                                                     SK_pred_java_primitive_integer_value_div_rem_ARG_right_1,
                                                                     SK_pred_java_primitive_integer_value_div_rem_ARG_result_1,
                                                                     SK_pred_java_primitive_integer_value_div_rem_ARG_remainder_1];
                  
                  }
               
               }
             else    {
                  havoc SK_pred_java_primitive_integer_value_div_rem_ARG_left_1;
                  havoc SK_pred_java_primitive_integer_value_div_rem_ARG_right_1;
                  havoc SK_pred_java_primitive_integer_value_div_rem_ARG_result_1;
                  havoc SK_pred_java_primitive_integer_value_div_rem_ARG_remainder_1;
                  assume equ[SK_pred_java_primitive_integer_value_div_rem_ARG_left_1,
                     i2];
                  assume equ[SK_pred_java_primitive_integer_value_div_rem_ARG_right_1,
                     i3];
                  assume pred_java_primitive_integer_value_div_rem_marker[SK_pred_java_primitive_integer_value_div_rem_ARG_left_1,
                                                                  SK_pred_java_primitive_integer_value_div_rem_ARG_right_1,
                                                                  SK_pred_java_primitive_integer_value_div_rem_ARG_result_1,
                                                                  SK_pred_java_primitive_integer_value_div_rem_ARG_remainder_1];
               
               }
            ;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               t_10:=SK_pred_java_primitive_integer_value_div_rem_ARG_result_1;
            } else {
               skip;
            };
            var auxVarForArithmeticExceptionDivisionByZeroJavaPrimitiveIntegerValue_2:JavaPrimitiveIntegerValue;
            havoc auxVarForArithmeticExceptionDivisionByZeroJavaPrimitiveIntegerValue_2;
            assume equ[auxVarForArithmeticExceptionDivisionByZeroJavaPrimitiveIntegerValue_2,
               t_10];
            var SK_pred_java_primitive_integer_value_div_rem_ARG_left_3:JavaPrimitiveIntegerValue;
            var SK_pred_java_primitive_integer_value_div_rem_ARG_right_3:JavaPrimitiveIntegerValue;
            var SK_pred_java_primitive_integer_value_div_rem_ARG_result_3:JavaPrimitiveIntegerValue;
            var SK_pred_java_primitive_integer_value_div_rem_ARG_remainder_3:JavaPrimitiveIntegerValue;
            if pred_java_primitive_integer_value_eq[auxVarForArithmeticExceptionDivisionByZeroJavaPrimitiveIntegerValue_2,
                                                JavaPrimitiveIntegerLiteral0]   {
                  throw:=java_lang_ArithmeticExceptionLit;
                  {
                     havoc SK_pred_java_primitive_integer_value_div_rem_ARG_left_3;
                     havoc auxVarForArithmeticExceptionDivisionByZeroJavaPrimitiveIntegerValue_2;
                     havoc SK_pred_java_primitive_integer_value_div_rem_ARG_right_3;
                     havoc SK_pred_java_primitive_integer_value_div_rem_ARG_result_3;
                     havoc SK_pred_java_primitive_integer_value_div_rem_ARG_remainder_3;
                     assume equ[SK_pred_java_primitive_integer_value_div_rem_ARG_left_3,
                        i1];
                     assume equ[auxVarForArithmeticExceptionDivisionByZeroJavaPrimitiveIntegerValue_2,
                        t_10];
                     assume equ[SK_pred_java_primitive_integer_value_div_rem_ARG_right_3,
                        JavaPrimitiveIntegerLiteral1];
                     assume pred_java_primitive_integer_value_div_rem_marker[SK_pred_java_primitive_integer_value_div_rem_ARG_left_3,
                                                                     SK_pred_java_primitive_integer_value_div_rem_ARG_right_3,
                                                                     SK_pred_java_primitive_integer_value_div_rem_ARG_result_3,
                                                                     SK_pred_java_primitive_integer_value_div_rem_ARG_remainder_3];
                  
                  }
               
               }
             else    {
                  havoc SK_pred_java_primitive_integer_value_div_rem_ARG_left_3;
                  havoc SK_pred_java_primitive_integer_value_div_rem_ARG_right_3;
                  havoc SK_pred_java_primitive_integer_value_div_rem_ARG_result_3;
                  havoc SK_pred_java_primitive_integer_value_div_rem_ARG_remainder_3;
                  assume equ[SK_pred_java_primitive_integer_value_div_rem_ARG_left_3,
                     i1];
                  assume equ[SK_pred_java_primitive_integer_value_div_rem_ARG_right_3,
                     t_10];
                  assume pred_java_primitive_integer_value_div_rem_marker[SK_pred_java_primitive_integer_value_div_rem_ARG_left_3,
                                                                  SK_pred_java_primitive_integer_value_div_rem_ARG_right_3,
                                                                  SK_pred_java_primitive_integer_value_div_rem_ARG_result_3,
                                                                  SK_pred_java_primitive_integer_value_div_rem_ARG_remainder_3];
               
               }
            ;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               i2:=SK_pred_java_primitive_integer_value_div_rem_ARG_result_3;
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false)   {
                  return:=true;
                  exit_stmt_reached:=true;
               
               }
             else {
               skip;
            };
         
         }
      
      }
      skip;
   
   }


program ar_edu_taco_skunk_Landing::isHeightPositive[
  var throw:java_lang_Throwable+null,
  var return:java_lang_Boolean+null,
  var height:JavaPrimitiveFloatValue] 
Implementation 

   {
      skip;
      {
         throw:=null;
         var exit_stmt_reached:boolean;
         exit_stmt_reached:=false;
         {
            var t_1:boolean;
            var t_2:boolean;
            var var_1_b:java_lang_Boolean+null;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               var_1_b:=((java_lang_Boolean+null) & (null));
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               t_1:=(pred_java_primitive_float_value_gt[height,
                                                 JavaPrimitiveFloatLiteral0]=>(true)else(false));
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if t_1=true{
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     if isEmptyOrNull[ClassFields]{
                        throw:=java_lang_NullPointerExceptionLit;
                     } else {
                        var_1_b:=ClassFields.java_lang_Boolean_TRUE;
                     };
                  } else {
                     skip;
                  };
               } else {
                  skip;
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               t_2:=(pred_java_primitive_float_value_lte[height,
                                                  JavaPrimitiveFloatLiteral0]=>(true)else(false));
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if t_2=true{
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     if isEmptyOrNull[ClassFields]{
                        throw:=java_lang_NullPointerExceptionLit;
                     } else {
                        var_1_b:=ClassFields.java_lang_Boolean_FALSE;
                     };
                  } else {
                     skip;
                  };
               } else {
                  skip;
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false)   {
                  return:=var_1_b;
                  exit_stmt_reached:=true;
               
               }
             else {
               skip;
            };
         
         }
      
      }
      skip;
   
   }


program ar_edu_taco_skunk_Landing::aerodynamic1[
  var thiz:ar_edu_taco_skunk_Landing,
  var throw:java_lang_Throwable+null,
  var return:boolean,
  var i1:JavaPrimitiveIntegerValue,
  var i2:JavaPrimitiveIntegerValue,
  var i3:JavaPrimitiveIntegerValue,
  var i4:JavaPrimitiveIntegerValue,
  var i5:JavaPrimitiveIntegerValue] 
Specification 
{
  SpecCase #0 {
   requires {
      neq[i1,
         JavaPrimitiveIntegerLiteral1]
      and 
      neq[i2,
         JavaPrimitiveIntegerLiteral1]
      and 
      neq[i3,
         JavaPrimitiveIntegerLiteral1]
      and 
      neq[i4,
         JavaPrimitiveIntegerLiteral1]
      and 
      neq[i5,
         JavaPrimitiveIntegerLiteral1]
   }
   
   ensures {
      (
        throw'=null)
      implies 
              equ[return',
                 false]
   }
   
   modifies {
   EVERYTHING}
  }
}
Implementation 

   {
      skip;
      {
         throw:=null;
         var exit_stmt_reached:boolean;
         exit_stmt_reached:=false;
         {
            var t_5:JavaPrimitiveIntegerValue;
            var t_6:JavaPrimitiveIntegerValue;
            var t_7:JavaPrimitiveIntegerValue;
            var t_8:JavaPrimitiveIntegerValue;
            var t_9:boolean;
            var SK_pred_java_primitive_integer_value_mul_ARG_left_0:JavaPrimitiveIntegerValue;
            var SK_pred_java_primitive_integer_value_mul_ARG_right_0:JavaPrimitiveIntegerValue;
            var SK_pred_java_primitive_integer_value_mul_ARG_result_0:JavaPrimitiveIntegerValue;
            var SK_pred_java_primitive_integer_value_mul_ARG_overflow_0:boolean;
            havoc SK_pred_java_primitive_integer_value_mul_ARG_left_0;
            havoc SK_pred_java_primitive_integer_value_mul_ARG_right_0;
            havoc SK_pred_java_primitive_integer_value_mul_ARG_result_0;
            havoc SK_pred_java_primitive_integer_value_mul_ARG_overflow_0;
            assume equ[SK_pred_java_primitive_integer_value_mul_ARG_left_0,
               i1];
            assume equ[SK_pred_java_primitive_integer_value_mul_ARG_right_0,
               i2];
            assume pred_java_primitive_integer_value_mul_marker[SK_pred_java_primitive_integer_value_mul_ARG_left_0,
                                                        SK_pred_java_primitive_integer_value_mul_ARG_right_0,
                                                        SK_pred_java_primitive_integer_value_mul_ARG_result_0,
                                                        SK_pred_java_primitive_integer_value_mul_ARG_overflow_0];
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               t_5:=SK_pred_java_primitive_integer_value_mul_ARG_result_0;
            } else {
               skip;
            };
            var SK_pred_java_primitive_integer_value_mul_ARG_left_1:JavaPrimitiveIntegerValue;
            var SK_pred_java_primitive_integer_value_mul_ARG_right_1:JavaPrimitiveIntegerValue;
            var SK_pred_java_primitive_integer_value_mul_ARG_result_1:JavaPrimitiveIntegerValue;
            var SK_pred_java_primitive_integer_value_mul_ARG_overflow_1:boolean;
            havoc SK_pred_java_primitive_integer_value_mul_ARG_left_1;
            havoc SK_pred_java_primitive_integer_value_mul_ARG_right_1;
            havoc SK_pred_java_primitive_integer_value_mul_ARG_result_1;
            havoc SK_pred_java_primitive_integer_value_mul_ARG_overflow_1;
            assume equ[SK_pred_java_primitive_integer_value_mul_ARG_left_1,
               t_5];
            assume equ[SK_pred_java_primitive_integer_value_mul_ARG_right_1,
               i3];
            assume pred_java_primitive_integer_value_mul_marker[SK_pred_java_primitive_integer_value_mul_ARG_left_1,
                                                        SK_pred_java_primitive_integer_value_mul_ARG_right_1,
                                                        SK_pred_java_primitive_integer_value_mul_ARG_result_1,
                                                        SK_pred_java_primitive_integer_value_mul_ARG_overflow_1];
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               t_6:=SK_pred_java_primitive_integer_value_mul_ARG_result_1;
            } else {
               skip;
            };
            var SK_pred_java_primitive_integer_value_mul_ARG_left_2:JavaPrimitiveIntegerValue;
            var SK_pred_java_primitive_integer_value_mul_ARG_right_2:JavaPrimitiveIntegerValue;
            var SK_pred_java_primitive_integer_value_mul_ARG_result_2:JavaPrimitiveIntegerValue;
            var SK_pred_java_primitive_integer_value_mul_ARG_overflow_2:boolean;
            havoc SK_pred_java_primitive_integer_value_mul_ARG_left_2;
            havoc SK_pred_java_primitive_integer_value_mul_ARG_right_2;
            havoc SK_pred_java_primitive_integer_value_mul_ARG_result_2;
            havoc SK_pred_java_primitive_integer_value_mul_ARG_overflow_2;
            assume equ[SK_pred_java_primitive_integer_value_mul_ARG_left_2,
               t_6];
            assume equ[SK_pred_java_primitive_integer_value_mul_ARG_right_2,
               i4];
            assume pred_java_primitive_integer_value_mul_marker[SK_pred_java_primitive_integer_value_mul_ARG_left_2,
                                                        SK_pred_java_primitive_integer_value_mul_ARG_right_2,
                                                        SK_pred_java_primitive_integer_value_mul_ARG_result_2,
                                                        SK_pred_java_primitive_integer_value_mul_ARG_overflow_2];
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               t_7:=SK_pred_java_primitive_integer_value_mul_ARG_result_2;
            } else {
               skip;
            };
            var SK_pred_java_primitive_integer_value_mul_ARG_left_3:JavaPrimitiveIntegerValue;
            var SK_pred_java_primitive_integer_value_mul_ARG_right_3:JavaPrimitiveIntegerValue;
            var SK_pred_java_primitive_integer_value_mul_ARG_result_3:JavaPrimitiveIntegerValue;
            var SK_pred_java_primitive_integer_value_mul_ARG_overflow_3:boolean;
            havoc SK_pred_java_primitive_integer_value_mul_ARG_left_3;
            havoc SK_pred_java_primitive_integer_value_mul_ARG_right_3;
            havoc SK_pred_java_primitive_integer_value_mul_ARG_result_3;
            havoc SK_pred_java_primitive_integer_value_mul_ARG_overflow_3;
            assume equ[SK_pred_java_primitive_integer_value_mul_ARG_left_3,
               t_7];
            assume equ[SK_pred_java_primitive_integer_value_mul_ARG_right_3,
               i5];
            assume pred_java_primitive_integer_value_mul_marker[SK_pred_java_primitive_integer_value_mul_ARG_left_3,
                                                        SK_pred_java_primitive_integer_value_mul_ARG_right_3,
                                                        SK_pred_java_primitive_integer_value_mul_ARG_result_3,
                                                        SK_pred_java_primitive_integer_value_mul_ARG_overflow_3];
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               t_8:=SK_pred_java_primitive_integer_value_mul_ARG_result_3;
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               t_9:=(equ[t_8,
                  JavaPrimitiveIntegerLiteral1]=>(true)else(false));
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if t_9=true{
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false)   {
                        return:=true;
                        exit_stmt_reached:=true;
                     
                     }
                   else {
                     skip;
                  };
               } else {
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false)   {
                        return:=false;
                        exit_stmt_reached:=true;
                     
                     }
                   else {
                     skip;
                  };
               };
            } else {
               skip;
            };
         
         }
      
      }
      skip;
   
   }



