sig roops_core_objects_NodeCachingLinkedList extends java_lang_Object {}
{}




pred precondition_roops_core_objects_NodeCachingLinkedList_metodoPablo_0[
  SK_jml_pred_java_primitive_integer_value_add_ARG_result_0:univ,
  throw:univ
]{
   equ[throw,
      null]
   and 
   roops_core_objects_NodeCachingLinkedList_requires[SK_jml_pred_java_primitive_integer_value_add_ARG_result_0]

}

pred roops_core_objects_NodeCachingLinkedListCondition5[
  SK_pred_java_primitive_integer_value_mul_ARG_left_1:univ,
  var_1_k:univ
]{
   equ[SK_pred_java_primitive_integer_value_mul_ARG_left_1,
      var_1_k]

}

pred roops_core_objects_NodeCachingLinkedListCondition7[
  SK_pred_java_primitive_integer_value_mul_ARG_left_1:univ,
  SK_pred_java_primitive_integer_value_mul_ARG_overflow_1:univ,
  SK_pred_java_primitive_integer_value_mul_ARG_result_1:univ,
  SK_pred_java_primitive_integer_value_mul_ARG_right_1:univ
]{
   pred_java_primitive_integer_value_mul_marker[SK_pred_java_primitive_integer_value_mul_ARG_left_1,
                                               SK_pred_java_primitive_integer_value_mul_ARG_right_1,
                                               SK_pred_java_primitive_integer_value_mul_ARG_result_1,
                                               SK_pred_java_primitive_integer_value_mul_ARG_overflow_1]

}

pred roops_core_objects_NodeCachingLinkedListCondition0[
  SK_pred_java_primitive_integer_value_mul_ARG_left_0:univ,
  i:univ
]{
   equ[SK_pred_java_primitive_integer_value_mul_ARG_left_0,
      i]

}

pred roops_core_objects_NodeCachingLinkedListCondition4[
  exit_stmt_reached:univ,
  throw:univ
]{
   not (
     (
       throw=null)
     and 
     (
       exit_stmt_reached=false)
   )

}

pred roops_core_objects_NodeCachingLinkedListCondition3[
  exit_stmt_reached:univ,
  throw:univ
]{
   (
     throw=null)
   and 
   (
     exit_stmt_reached=false)

}

pred roops_core_objects_NodeCachingLinkedListCondition1[
  SK_pred_java_primitive_integer_value_mul_ARG_right_0:univ,
  j:univ
]{
   equ[SK_pred_java_primitive_integer_value_mul_ARG_right_0,
      j]

}

pred roops_core_objects_NodeCachingLinkedListCondition6[
  SK_pred_java_primitive_integer_value_mul_ARG_right_1:univ,
  var_1_k:univ
]{
   equ[SK_pred_java_primitive_integer_value_mul_ARG_right_1,
      var_1_k]

}

pred roops_core_objects_NodeCachingLinkedListCondition2[
  SK_pred_java_primitive_integer_value_mul_ARG_left_0:univ,
  SK_pred_java_primitive_integer_value_mul_ARG_overflow_0:univ,
  SK_pred_java_primitive_integer_value_mul_ARG_result_0:univ,
  SK_pred_java_primitive_integer_value_mul_ARG_right_0:univ
]{
   pred_java_primitive_integer_value_mul_marker[SK_pred_java_primitive_integer_value_mul_ARG_left_0,
                                               SK_pred_java_primitive_integer_value_mul_ARG_right_0,
                                               SK_pred_java_primitive_integer_value_mul_ARG_result_0,
                                               SK_pred_java_primitive_integer_value_mul_ARG_overflow_0]

}

pred roops_core_objects_NodeCachingLinkedList_ensures[
  SK_jml_pred_java_primitive_integer_value_add_ARG_result_1:univ,
  return':univ,
  throw':univ
]{
   (
     throw'=null)
   implies 
           pred_java_primitive_integer_value_gt[return',
                                               SK_jml_pred_java_primitive_integer_value_add_ARG_result_1]

}

pred roops_core_objects_NodeCachingLinkedList_requires[
  SK_jml_pred_java_primitive_integer_value_add_ARG_result_0:univ
]{
   pred_java_primitive_integer_value_gt[SK_jml_pred_java_primitive_integer_value_add_ARG_result_0,
                                       JavaPrimitiveIntegerLiteral0]

}

pred postcondition_roops_core_objects_NodeCachingLinkedList_metodoPablo_0[
  SK_jml_pred_java_primitive_integer_value_add_ARG_result_1:univ,
  return':univ,
  throw':univ
]{
   roops_core_objects_NodeCachingLinkedList_ensures[SK_jml_pred_java_primitive_integer_value_add_ARG_result_1,
                                                   return',
                                                   throw']
   and 
   (
     not (
       throw'=AssertionFailureLit)
   )

}

program roops_core_objects_NodeCachingLinkedList_metodoPablo_0[
  thiz:roops_core_objects_NodeCachingLinkedList,
  throw:java_lang_Throwable+null,
  return:JavaPrimitiveIntegerValue,
  i:JavaPrimitiveIntegerValue,
  j:JavaPrimitiveIntegerValue,
  SK_jml_pred_java_primitive_integer_value_add_ARG_result_1:JavaPrimitiveIntegerValue,
  SK_jml_pred_java_primitive_integer_value_add_ARG_overflow_1:boolean,
  SK_jml_pred_java_primitive_integer_value_add_ARG_overflow_0:boolean,
  SK_jml_pred_java_primitive_integer_value_add_ARG_result_0:JavaPrimitiveIntegerValue,
  usedObjects:set (java_lang_Object)
] var [
  SK_pred_java_primitive_integer_value_mul_ARG_right_0:JavaPrimitiveIntegerValue,
  SK_pred_java_primitive_integer_value_mul_ARG_left_1:JavaPrimitiveIntegerValue,
  var_1_k:JavaPrimitiveIntegerValue,
  exit_stmt_reached:boolean,
  SK_pred_java_primitive_integer_value_mul_ARG_overflow_1:boolean,
  SK_pred_java_primitive_integer_value_mul_ARG_left_0:JavaPrimitiveIntegerValue,
  t_1:JavaPrimitiveIntegerValue,
  SK_pred_java_primitive_integer_value_mul_ARG_overflow_0:boolean,
  SK_pred_java_primitive_integer_value_mul_ARG_result_1:JavaPrimitiveIntegerValue,
  SK_pred_java_primitive_integer_value_mul_ARG_right_1:JavaPrimitiveIntegerValue,
  SK_pred_java_primitive_integer_value_mul_ARG_result_0:JavaPrimitiveIntegerValue
]{
   skip;
   throw:=null;
   skip;
   exit_stmt_reached:=false;
   skip;
   skip;
   skip;
   skip;
   skip;
   havocVariable[SK_pred_java_primitive_integer_value_mul_ARG_left_0];
   havocVariable[SK_pred_java_primitive_integer_value_mul_ARG_right_0];
   havocVariable[SK_pred_java_primitive_integer_value_mul_ARG_result_0];
   havocVariable[SK_pred_java_primitive_integer_value_mul_ARG_overflow_0];
   assume roops_core_objects_NodeCachingLinkedListCondition0[SK_pred_java_primitive_integer_value_mul_ARG_left_0,i];
   assume roops_core_objects_NodeCachingLinkedListCondition1[SK_pred_java_primitive_integer_value_mul_ARG_right_0,j];
   assume roops_core_objects_NodeCachingLinkedListCondition2[SK_pred_java_primitive_integer_value_mul_ARG_left_0,SK_pred_java_primitive_integer_value_mul_ARG_overflow_0,SK_pred_java_primitive_integer_value_mul_ARG_result_0,SK_pred_java_primitive_integer_value_mul_ARG_right_0];
   if roops_core_objects_NodeCachingLinkedListCondition3[exit_stmt_reached,throw]  {
      t_1:=SK_pred_java_primitive_integer_value_mul_ARG_result_0
   
   } else {
      skip
   
   }
   ;
   skip;
   if roops_core_objects_NodeCachingLinkedListCondition3[exit_stmt_reached,throw]  {
      var_1_k:=t_1
   
   } else {
      skip
   
   }
   ;
   skip;
   skip;
   skip;
   skip;
   havocVariable[SK_pred_java_primitive_integer_value_mul_ARG_left_1];
   havocVariable[SK_pred_java_primitive_integer_value_mul_ARG_right_1];
   havocVariable[SK_pred_java_primitive_integer_value_mul_ARG_result_1];
   havocVariable[SK_pred_java_primitive_integer_value_mul_ARG_overflow_1];
   assume roops_core_objects_NodeCachingLinkedListCondition5[SK_pred_java_primitive_integer_value_mul_ARG_left_1,var_1_k];
   assume roops_core_objects_NodeCachingLinkedListCondition6[SK_pred_java_primitive_integer_value_mul_ARG_right_1,var_1_k];
   assume roops_core_objects_NodeCachingLinkedListCondition7[SK_pred_java_primitive_integer_value_mul_ARG_left_1,SK_pred_java_primitive_integer_value_mul_ARG_overflow_1,SK_pred_java_primitive_integer_value_mul_ARG_result_1,SK_pred_java_primitive_integer_value_mul_ARG_right_1];
   if roops_core_objects_NodeCachingLinkedListCondition3[exit_stmt_reached,throw]  {
      var_1_k:=SK_pred_java_primitive_integer_value_mul_ARG_result_1
   
   } else {
      skip
   
   }
   ;
   if roops_core_objects_NodeCachingLinkedListCondition3[exit_stmt_reached,throw]  {
      return:=var_1_k;
      exit_stmt_reached:=true
   
   } else {
      skip
   
   }
   ;
   skip

}

assertCorrectness check_roops_core_objects_NodeCachingLinkedList_metodoPablo_0[
  SK_jml_pred_java_primitive_integer_value_add_ARG_overflow_0:boolean,
  SK_jml_pred_java_primitive_integer_value_add_ARG_overflow_1:boolean,
  SK_jml_pred_java_primitive_integer_value_add_ARG_result_0:JavaPrimitiveIntegerValue,
  SK_jml_pred_java_primitive_integer_value_add_ARG_result_1:JavaPrimitiveIntegerValue,
  SK_pred_java_primitive_integer_value_mul_ARG_left_0:JavaPrimitiveIntegerValue,
  SK_pred_java_primitive_integer_value_mul_ARG_left_1:JavaPrimitiveIntegerValue,
  SK_pred_java_primitive_integer_value_mul_ARG_overflow_0:boolean,
  SK_pred_java_primitive_integer_value_mul_ARG_overflow_1:boolean,
  SK_pred_java_primitive_integer_value_mul_ARG_result_0:JavaPrimitiveIntegerValue,
  SK_pred_java_primitive_integer_value_mul_ARG_result_1:JavaPrimitiveIntegerValue,
  SK_pred_java_primitive_integer_value_mul_ARG_right_0:JavaPrimitiveIntegerValue,
  SK_pred_java_primitive_integer_value_mul_ARG_right_1:JavaPrimitiveIntegerValue,
  exit_stmt_reached:boolean,
  i:JavaPrimitiveIntegerValue,
  j:JavaPrimitiveIntegerValue,
  return:JavaPrimitiveIntegerValue,
  t_1:JavaPrimitiveIntegerValue,
  thiz:roops_core_objects_NodeCachingLinkedList,
  throw:java_lang_Throwable+null,
  usedObjects:set (java_lang_Object),
  var_1_k:JavaPrimitiveIntegerValue
]{
pre={
   precondition_roops_core_objects_NodeCachingLinkedList_metodoPablo_0[SK_jml_pred_java_primitive_integer_value_add_ARG_result_0,
                                                                      throw]

}
program={
   call roops_core_objects_NodeCachingLinkedList_metodoPablo_0[thiz,throw,return,i,j,SK_jml_pred_java_primitive_integer_value_add_ARG_result_1,SK_jml_pred_java_primitive_integer_value_add_ARG_overflow_1,SK_jml_pred_java_primitive_integer_value_add_ARG_overflow_0,SK_jml_pred_java_primitive_integer_value_add_ARG_result_0,usedObjects]

}
post={
   postcondition_roops_core_objects_NodeCachingLinkedList_metodoPablo_0[SK_jml_pred_java_primitive_integer_value_add_ARG_result_1,
                                                                       return',
                                                                       throw']

}
}

