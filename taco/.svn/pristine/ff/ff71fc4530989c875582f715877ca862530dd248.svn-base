//-------------- prelude--------------//
module moduleId 

open util/integer 
open util/sequniv as sequniv 

one sig null {} 

fun fun_reach[h: univ, 
              type: set univ, 
              field: univ -> univ
]: set univ { 
  h.*(field & type->(type+null)) & type 
}

fun fun_weak_reach[h: univ, 
              type: set univ, 
              field: univ -> univ
]: set univ { 
  h.*(field) & type 
}

one sig AssertionFailureLit extends java_lang_Throwable {} 
abstract sig boolean {} 
one sig true extends boolean {} 
one sig false extends boolean {} 

abstract sig char {} 

pred TruePred[] {} 
pred FalsePred[] { not TruePred[] } 
pred equ[l,r:univ] {l=r} 
pred neq[l,r:univ] {l!=r} 

fun shl[l,r: Int]: Int { l << r } 
fun sshr[l,r: Int]: Int { l >> r } 
fun ushr[l,r: Int]: Int { l >>> r } 

fun fun_univ_equals[
  l:univ, 
  r: univ 
]: boolean { 
  (equ[l,r]) => true else false 
} 

fun fun_set_add[
  l: set univ,
  e: univ
]: set univ { 
  l+e 
} 

fun fun_set_remove[
  l: set univ,
  e: univ
]: set univ {
  l-e
}
fun fun_set_contains[
  l: set univ,
  e: univ
]: boolean {
  (e in l) => true else false 
} 
pred isSubset[
  l: set univ,
  r: set univ
] {
  (l in r) 
} 
pred isNotSubset[
  l: set univ,
  r: set univ
] {
  (l !in r) 
} 
fun fun_set_size[s: set univ]: Int { #s } 

fun fun_not_empty_set[s: set univ]: boolean { (no s) => false else true } 

fun fun_set_is_empty[s: set univ]: boolean { (no s) => true else false } 

pred pred_empty_set[l: set univ] { (no l) } 

pred pred_set_some[l: set univ] { some l } 

pred pred_set_one[l: set univ] { one l } 

pred pred_set_lone[l: set univ] { lone l } 

pred pred_Object_subset[
  s: set univ
] {
  s in java_lang_Object+null
}

fun fun_set_intersection[
  l: set univ,
  r: set univ
]: set univ {
  l & r 
} 
fun fun_set_difference[
  l: set univ,
  r: set univ
]: set univ {
  l - r 
} 
fun fun_rel_difference[ 
  rel: univ -> univ, 
  l: univ,
  r: univ
]: univ->univ {
 rel - (l->r) 
}
fun fun_rel_add[ 
  rel: univ -> univ, 
  l: univ,
  r: univ
]: univ->univ {
 rel + (l->r) 
}
fun fun_set_sum[
  s: set Int
]: Int {
  sum s 
} 
pred pred_empty_list[l: Int -> univ] { (no l) } 

fun fun_list_add[
  l: Int -> univ,
  e: univ
]: Int -> univ {
  l + (Int[#(l.univ)]->e)
} 

fun fun_list_get[
  l: Int -> univ, 
  index: Int
]: univ { 
  index.l 
} 

fun fun_list_contains[
  l: Int -> univ, 
  e: univ
]: boolean { 
  (e in Int.l) => true else false 
} 

fun fun_list_remove[
  l: Int -> univ, 
  index: Int
]: Int -> univ { 
  prevs[index]<:(l-(index->univ)) + next.(nexts[index]<:(l-(index->univ))) 
} 

fun fun_list_size[s: Int -> univ]: Int { #s } 

fun fun_list_equals[
  s1:Int -> univ, 
  s2: Int -> univ
]: boolean { 
  (s1=s2) => true else false 
} 

fun fun_list_empty[s: Int -> univ]: boolean { (#s = 0) => true else false } 

pred pred_empty_map[map: univ -> univ] { (no map) } 

fun fun_map_put[
  map: univ->univ, 
  k: univ, 
  v: univ
]: univ-> univ { 
  map ++ (k->v) 
}

fun fun_map_contains_key[
  map: univ -> univ, 
  k: univ
]: boolean { 
  (some k.map) => true else false 
}

fun fun_map_remove[
  map: univ -> univ, 
  k: univ
]: univ->univ {
  map - (k->univ) 
} 

fun fun_map_get[
  map: univ -> univ, 
  k: univ
]: univ { 
  (some k.map) => k.map else null 
} 

fun fun_map_is_empty[
  map: univ -> univ, 
]: boolean { 
  (some map) => false else true 
}

fun fun_map_clear[
  mapEntries1: univ -> univ -> univ, 
  map: univ
]: univ -> univ -> univ { 
  mapEntries1 - (map -> univ -> univ)
}

fun fun_map_size[
  map: univ -> univ, 
]: univ {
  #map 
} 

pred isEmptyOrNull[u: univ] { u in null } 
fun fun_closure[
  rel: univ -> univ 
]: univ -> univ {
  ^rel 
} 

fun fun_reflexive_closure[
  rel: univ -> univ 
]: univ -> univ {
  *rel 
} 

fun fun_transpose[
  rel: univ -> univ 
]: univ -> univ {
  ~rel 
} 

pred liftExpression[
  expr: univ 
] {
  expr=true 
} 

fun rel_override[
  r:univ->univ,
  k:univ, 
  v:univ
]: univ->univ { 
  r - (k->univ) + (k->v) 
} 

fun Not[a: boolean]: boolean {
    (a=true) => false else true 
}
fun Or[a: boolean, b: boolean]: boolean {
    (a=true or b=true) => true else false
}
fun And[a: boolean, b: boolean]: boolean {
    (a=true and b=true) => true else false
}
fun Xor[a: boolean, b: boolean]: boolean {
    ((a==true and b==false) or (a==false and b==true)) => true else false
}
fun AdderCarry[a: boolean, b: boolean, cin: boolean]: boolean {
    Or[ And[a,b], And[cin, Xor[a,b]]] 
}
fun AdderSum[a: boolean, b: boolean, cin: boolean]: boolean {
    Xor[Xor[a, b], cin]
}
pred updateFieldPost[
  f1:univ->univ,
  f0:univ->univ,
  l:univ,
  r:univ
]{ 
  (r=none) => f1=f0-(l->univ) else f1 = f0 ++ (l->r) 
} 

pred havocVarPost[u:univ]{} 
pred havocVariable2Post[u:univ->univ]{}
action havocVariable2[u:univ->univ]{
 pre{TruePred[]}
 post{havocVariable2Post[u']}
}

pred havocVariable3Post[u:univ->(seq univ)]{}
action havocVariable3[u:univ->(seq univ)]{
 pre{TruePred[]}
 post{havocVariable3Post[u']}
}

pred havocFieldPost[f0,f1: univ->univ, u:univ]{ 
  u<:f0 = u<:f1 
  some u.f1  
} 

pred havocFieldContentsPost[target: univ, 
                            field_0: univ -> univ, 
                            field_1: univ -> univ] { 
  field_1 - (target->univ) = field_0 - (target->univ) 
}

action havocFieldContents[target: univ, 
                          field: univ->univ] {
  pre  { TruePred[] }
  post { havocFieldContentsPost[target,field,field'] }
}

pred havocListSeqPost[target: univ,
                            field_0: univ -> Int -> univ, 
                            field_1: univ -> Int -> univ] { 
  field_1 - (target->Int->univ) = field_0 - (target->Int->univ) 
}

action havocListSeq[target: univ,
                          field: univ->Int->univ] {
  pre  { TruePred[] }
  post { havocListSeqPost[target,field,field'] }
}

pred pred_in[n: univ, t: set univ] { n in t } 

pred instanceOf[n: univ, t: set univ] { n in t } 

pred isCasteableTo[n: univ, t: set univ] { (n in t) or (n = null) } 

pred getUnusedObjectPost[
  usedObjects1:set java_lang_Object, 
  usedObjects0:set java_lang_Object,
  n1: java_lang_Object+null
]{ 
  n1 !in usedObjects0 
  usedObjects1 = usedObjects0 + (n1)
} 

action updateField[
  l:univ,
  f:univ->univ,
  r:univ
]{
pre {
   TruePred[]
}
post {
   updateFieldPost[f',
                  f,
                  l,
                  r]
}
}

action getUnusedObject[
  n:java_lang_Object+null,
  usedObjects:set java_lang_Object
]{
pre {
   TruePred[]
}
post {
   getUnusedObjectPost[usedObjects',
                      usedObjects,
                      n']
}
}

action havocField[
  f:univ->univ,
  u:univ
]{
pre {
   TruePred[]
}
post {
   havocFieldPost[f,
                 f',
                 u]
}
}

action updateVariable[
  l:univ,
  r:univ
]{
pre {
   TruePred[]
}
post {
   equ[l',
      r]
}
}

action havocVariable[
  v:univ
]{
pre {
   TruePred[]
}
post {
   havocVarPost[v']
}
}

//-------------- ClassFields--------------//
one sig ClassFields {}
{}




//-------------- java_lang_RuntimeException--------------//
abstract sig java_lang_RuntimeException extends java_lang_Exception {}
{}



one sig java_lang_RuntimeExceptionLit extends java_lang_RuntimeException {}
{}

//-------------- java_lang_Exception--------------//
abstract sig java_lang_Exception extends java_lang_Throwable {}
{}



one sig java_lang_ExceptionLit extends java_lang_Exception {}
{}

//-------------- java_lang_Throwable--------------//
abstract sig java_lang_Throwable extends java_lang_Object {}
{}



one sig java_lang_ThrowableLit extends java_lang_Throwable {}
{}

//-------------- java_lang_Object--------------//
abstract sig java_lang_Object {}
{}




pred java_lang_ObjectCondition0[
  o:univ,
  thiz:univ
]{
   equ[thiz,
      o]

}

pred java_lang_ObjectCondition1[
  o:univ,
  thiz:univ
]{
   not (
     equ[thiz,
        o]
   )

}

pred java_lang_ObjectCondition2[
  o:univ
]{
   neq[o,
      null]

}

pred java_lang_ObjectCondition3[
  o:univ
]{
   not (
     neq[o,
        null]
   )

}

program java_lang_Object_equals_0[
  thiz:java_lang_Object,
  throw:java_lang_Throwable+null,
  return:boolean,
  o:java_lang_Object,
  SourcesPauli_LinkNode_data:(SourcesPauli_LinkNode)->one(java_lang_Object+null),
  SourcesPauli_ListLinked_first:(SourcesPauli_ListLinked)->one(SourcesPauli_LinkNode+null),
  SourcesPauli_LinkNode_next:(SourcesPauli_LinkNode)->one(SourcesPauli_LinkNode+null),
  SourcesPauli_ListLinked_last:(SourcesPauli_ListLinked)->one(SourcesPauli_LinkNode+null),
  usedObjects:set (java_lang_Object)
] var [

]{
   throw:=null;
   if java_lang_ObjectCondition2[o]  {
      if java_lang_ObjectCondition0[o,thiz]  {
         return:=true
      
      } else {
         return:=false
      
      }
   
   } else {
      return:=false
   
   }

}

//-------------- java_lang_NullPointerException--------------//
abstract one sig java_lang_NullPointerException extends java_lang_RuntimeException {}
{}



one sig java_lang_NullPointerExceptionLit extends java_lang_NullPointerException {}
{}

//-------------- SourcesPauli_LinkNode--------------//
sig SourcesPauli_LinkNode extends java_lang_Object {}
{}




pred SourcesPauli_LinkNodeCondition1[
  thiz:univ
]{
   not (
     isEmptyOrNull[thiz])

}

pred SourcesPauli_LinkNodeCondition0[
  thiz:univ
]{
   isEmptyOrNull[thiz]

}

pred SourcesPauli_LinkNodeCondition3[
  exit_stmt_reached:univ,
  throw:univ
]{
   not (
     (
       throw=null)
     and 
     (
       exit_stmt_reached=false)
   )

}

pred SourcesPauli_LinkNodeCondition2[
  exit_stmt_reached:univ,
  throw:univ
]{
   (
     throw=null)
   and 
   (
     exit_stmt_reached=false)

}

program SourcesPauli_LinkNode_setData_0[
  thiz:SourcesPauli_LinkNode,
  throw:java_lang_Throwable+null,
  data:java_lang_Object+null,
  SourcesPauli_LinkNode_data:(SourcesPauli_LinkNode)->one(java_lang_Object+null),
  SourcesPauli_ListLinked_first:(SourcesPauli_ListLinked)->one(SourcesPauli_LinkNode+null),
  SourcesPauli_LinkNode_next:(SourcesPauli_LinkNode)->one(SourcesPauli_LinkNode+null),
  SourcesPauli_ListLinked_last:(SourcesPauli_ListLinked)->one(SourcesPauli_LinkNode+null),
  usedObjects:set (java_lang_Object)
] var [
  exit_stmt_reached:boolean,
  param_data_4:java_lang_Object+null
]{
   skip;
   throw:=null;
   skip;
   exit_stmt_reached:=false;
   skip;
   if SourcesPauli_LinkNodeCondition2[exit_stmt_reached,throw]  {
      param_data_4:=data
   
   } else {
      skip
   
   }
   ;
   if SourcesPauli_LinkNodeCondition2[exit_stmt_reached,throw]  {
      if SourcesPauli_LinkNodeCondition0[thiz]  {
         throw:=java_lang_NullPointerExceptionLit
      
      } else {
         SourcesPauli_LinkNode_data:=(SourcesPauli_LinkNode_data)++((thiz)->(param_data_4))
      
      }
   
   } else {
      skip
   
   }
   ;
   skip

}

program SourcesPauli_LinkNode_getNext_0[
  thiz:SourcesPauli_LinkNode,
  throw:java_lang_Throwable+null,
  return:SourcesPauli_LinkNode+null,
  SourcesPauli_LinkNode_data:(SourcesPauli_LinkNode)->one(java_lang_Object+null),
  SourcesPauli_ListLinked_first:(SourcesPauli_ListLinked)->one(SourcesPauli_LinkNode+null),
  SourcesPauli_LinkNode_next:(SourcesPauli_LinkNode)->one(SourcesPauli_LinkNode+null),
  SourcesPauli_ListLinked_last:(SourcesPauli_ListLinked)->one(SourcesPauli_LinkNode+null),
  usedObjects:set (java_lang_Object)
] var [
  exit_stmt_reached:boolean
]{
   skip;
   throw:=null;
   skip;
   exit_stmt_reached:=false;
   if SourcesPauli_LinkNodeCondition2[exit_stmt_reached,throw]  {
      if SourcesPauli_LinkNodeCondition0[thiz]  {
         throw:=java_lang_NullPointerExceptionLit
      
      } else {
         return:=thiz.SourcesPauli_LinkNode_next
      
      }
      ;
      exit_stmt_reached:=true
   
   } else {
      skip
   
   }
   ;
   skip

}

program SourcesPauli_LinkNode_Constructor_0[
  thiz:SourcesPauli_LinkNode,
  throw:java_lang_Throwable+null,
  SourcesPauli_LinkNode_data:(SourcesPauli_LinkNode)->one(java_lang_Object+null),
  SourcesPauli_ListLinked_first:(SourcesPauli_ListLinked)->one(SourcesPauli_LinkNode+null),
  SourcesPauli_LinkNode_next:(SourcesPauli_LinkNode)->one(SourcesPauli_LinkNode+null),
  SourcesPauli_ListLinked_last:(SourcesPauli_ListLinked)->one(SourcesPauli_LinkNode+null),
  usedObjects:set (java_lang_Object)
] var [
  exit_stmt_reached:boolean
]{
   skip;
   throw:=null;
   skip;
   exit_stmt_reached:=false;
   if SourcesPauli_LinkNodeCondition2[exit_stmt_reached,throw]  {
      if SourcesPauli_LinkNodeCondition0[thiz]  {
         throw:=java_lang_NullPointerExceptionLit
      
      } else {
         SourcesPauli_LinkNode_data:=(SourcesPauli_LinkNode_data)++((thiz)->(((java_lang_Object+null) & (null))))
      
      }
   
   } else {
      skip
   
   }
   ;
   if SourcesPauli_LinkNodeCondition2[exit_stmt_reached,throw]  {
      if SourcesPauli_LinkNodeCondition0[thiz]  {
         throw:=java_lang_NullPointerExceptionLit
      
      } else {
         SourcesPauli_LinkNode_next:=(SourcesPauli_LinkNode_next)++((thiz)->(((SourcesPauli_LinkNode+null) & (null))))
      
      }
   
   } else {
      skip
   
   }
   ;
   if SourcesPauli_LinkNodeCondition2[exit_stmt_reached,throw]  {
      if SourcesPauli_LinkNodeCondition0[thiz]  {
         throw:=java_lang_NullPointerExceptionLit
      
      } else {
         SourcesPauli_LinkNode_data:=(SourcesPauli_LinkNode_data)++((thiz)->(null))
      
      }
   
   } else {
      skip
   
   }
   ;
   if SourcesPauli_LinkNodeCondition2[exit_stmt_reached,throw]  {
      if SourcesPauli_LinkNodeCondition0[thiz]  {
         throw:=java_lang_NullPointerExceptionLit
      
      } else {
         SourcesPauli_LinkNode_next:=(SourcesPauli_LinkNode_next)++((thiz)->(((SourcesPauli_LinkNode+null) & (null))))
      
      }
   
   } else {
      skip
   
   }
   ;
   skip

}

program SourcesPauli_LinkNode_setNext_0[
  thiz:SourcesPauli_LinkNode,
  throw:java_lang_Throwable+null,
  next:SourcesPauli_LinkNode+null,
  SourcesPauli_LinkNode_data:(SourcesPauli_LinkNode)->one(java_lang_Object+null),
  SourcesPauli_ListLinked_first:(SourcesPauli_ListLinked)->one(SourcesPauli_LinkNode+null),
  SourcesPauli_LinkNode_next:(SourcesPauli_LinkNode)->one(SourcesPauli_LinkNode+null),
  SourcesPauli_ListLinked_last:(SourcesPauli_ListLinked)->one(SourcesPauli_LinkNode+null),
  usedObjects:set (java_lang_Object)
] var [
  exit_stmt_reached:boolean,
  param_next_5:SourcesPauli_LinkNode+null
]{
   skip;
   throw:=null;
   skip;
   exit_stmt_reached:=false;
   skip;
   if SourcesPauli_LinkNodeCondition2[exit_stmt_reached,throw]  {
      param_next_5:=next
   
   } else {
      skip
   
   }
   ;
   if SourcesPauli_LinkNodeCondition2[exit_stmt_reached,throw]  {
      if SourcesPauli_LinkNodeCondition0[thiz]  {
         throw:=java_lang_NullPointerExceptionLit
      
      } else {
         SourcesPauli_LinkNode_next:=(SourcesPauli_LinkNode_next)++((thiz)->(param_next_5))
      
      }
   
   } else {
      skip
   
   }
   ;
   skip

}

program SourcesPauli_LinkNode_getData_0[
  thiz:SourcesPauli_LinkNode,
  throw:java_lang_Throwable+null,
  return:java_lang_Object+null,
  SourcesPauli_LinkNode_data:(SourcesPauli_LinkNode)->one(java_lang_Object+null),
  SourcesPauli_ListLinked_first:(SourcesPauli_ListLinked)->one(SourcesPauli_LinkNode+null),
  SourcesPauli_LinkNode_next:(SourcesPauli_LinkNode)->one(SourcesPauli_LinkNode+null),
  SourcesPauli_ListLinked_last:(SourcesPauli_ListLinked)->one(SourcesPauli_LinkNode+null),
  usedObjects:set (java_lang_Object)
] var [
  exit_stmt_reached:boolean
]{
   skip;
   throw:=null;
   skip;
   exit_stmt_reached:=false;
   if SourcesPauli_LinkNodeCondition2[exit_stmt_reached,throw]  {
      if SourcesPauli_LinkNodeCondition0[thiz]  {
         throw:=java_lang_NullPointerExceptionLit
      
      } else {
         return:=thiz.SourcesPauli_LinkNode_data
      
      }
      ;
      exit_stmt_reached:=true
   
   } else {
      skip
   
   }
   ;
   skip

}

//-------------- SourcesPauli_ListLinked--------------//
sig SourcesPauli_ListLinked extends java_lang_Object {}
{}




pred SourcesPauli_ListLinkedCondition11[
  thiz:univ
]{
   not (
     isEmptyOrNull[thiz]
     or 
     isEmptyOrNull[thiz]
   )

}

pred SourcesPauli_ListLinkedCondition10[
  thiz:univ
]{
   isEmptyOrNull[thiz]
   or 
   isEmptyOrNull[thiz]

}

pred SourcesPauli_ListLinkedCondition6[
  param_obj_3:univ
]{
   isEmptyOrNull[param_obj_3]

}

pred SourcesPauli_ListLinkedCondition7[
  param_obj_3:univ
]{
   not (
     isEmptyOrNull[param_obj_3])

}

pred SourcesPauli_ListLinkedCondition14[
  t_8:univ
]{
   t_8=true

}

pred SourcesPauli_ListLinkedCondition15[
  t_8:univ
]{
   not (
     t_8=true)

}

pred SourcesPauli_ListLinked_ensures[
  SourcesPauli_LinkNode_data':univ->univ,
  SourcesPauli_LinkNode_next:univ->univ,
  SourcesPauli_LinkNode_next':univ->univ,
  SourcesPauli_ListLinked_first:univ->univ,
  SourcesPauli_ListLinked_first':univ->univ,
  obj':univ,
  thiz:univ,
  thiz':univ,
  throw':univ
]{
   (
     throw'=null)
   implies 
           (
             some n:SourcesPauli_LinkNode+null | {
               liftExpression[true]
               and 
               (
                 (
                   (
                     fun_set_contains[fun_reach[thiz.SourcesPauli_ListLinked_first,SourcesPauli_LinkNode,SourcesPauli_LinkNode_next],n]=true)
                   and 
                   equ[n.SourcesPauli_LinkNode_data',
                      obj']
                 )
                 implies 
                         (
                           equ[fun_set_contains[fun_reach[thiz'.SourcesPauli_ListLinked_first',SourcesPauli_LinkNode,SourcesPauli_LinkNode_next'],n],
                              false]
                           and 
                           (
                             all m:SourcesPauli_LinkNode+null | {
                               (
                                 (
                                   fun_set_contains[fun_reach[thiz.SourcesPauli_ListLinked_first,SourcesPauli_LinkNode,SourcesPauli_LinkNode_next],m]=true)
                                 and 
                                 neq[m,
                                    n]
                               )
                               implies 
                                       liftExpression[fun_set_contains[fun_reach[thiz'.SourcesPauli_ListLinked_first',SourcesPauli_LinkNode,SourcesPauli_LinkNode_next'],m]]
                             
                             }
                           )
                         )
               )
             
             }
           )

}

pred SourcesPauli_ListLinkedCondition16[
  var_5_nextNode:univ
]{
   isEmptyOrNull[var_5_nextNode]

}

pred SourcesPauli_ListLinkedCondition8[
  t_5:univ
]{
   isEmptyOrNull[t_5]

}

pred SourcesPauli_ListLinkedCondition25[
  t_15:univ
]{
   t_15=true

}

pred SourcesPauli_ListLinkedCondition17[
  var_5_nextNode:univ
]{
   not (
     isEmptyOrNull[var_5_nextNode])

}

pred SourcesPauli_ListLinkedCondition9[
  t_5:univ
]{
   not (
     isEmptyOrNull[t_5])

}

pred SourcesPauli_ListLinked_object_invariant[
  SourcesPauli_LinkNode_next:univ->univ,
  SourcesPauli_ListLinked_first:univ->univ,
  SourcesPauli_ListLinked_last:univ->univ,
  thiz:univ
]{
   (
     (
       equ[thiz.SourcesPauli_ListLinked_first,
          null]
       and 
       equ[thiz.SourcesPauli_ListLinked_last,
          null]
     )
     or 
     (
       equ[fun_set_contains[fun_reach[thiz.SourcesPauli_ListLinked_first,SourcesPauli_LinkNode,SourcesPauli_LinkNode_next],thiz.SourcesPauli_ListLinked_last],
          true]
       and 
       equ[(thiz.SourcesPauli_ListLinked_last).SourcesPauli_LinkNode_next,
          null]
     )
   )
   and 
   (
     all n:SourcesPauli_LinkNode+null | {
       equ[fun_set_contains[fun_reach[thiz.SourcesPauli_ListLinked_first,SourcesPauli_LinkNode,SourcesPauli_LinkNode_next],n],
          true]
       implies 
               equ[fun_set_contains[fun_reach[n.SourcesPauli_LinkNode_next,SourcesPauli_LinkNode,SourcesPauli_LinkNode_next],n],
                  false]
     
     }
   )

}

pred SourcesPauli_ListLinkedCondition26[
  t_15:univ
]{
   not (
     t_15=true)

}

pred SourcesPauli_ListLinkedCondition13[
  var_2_currentNode:univ
]{
   not (
     isEmptyOrNull[var_2_currentNode])

}

pred SourcesPauli_ListLinkedCondition12[
  var_2_currentNode:univ
]{
   isEmptyOrNull[var_2_currentNode]

}

pred precondition_SourcesPauli_ListLinked_remove_0[
  SourcesPauli_LinkNode_data:univ->univ,
  SourcesPauli_LinkNode_next:univ->univ,
  SourcesPauli_ListLinked_first:univ->univ,
  SourcesPauli_ListLinked_last:univ->univ,
  obj:univ,
  thiz:univ,
  throw:univ,
  usedObjects:univ
]{
   equ[throw,
      null]
   and 
   SourcesPauli_ListLinked_requires[SourcesPauli_LinkNode_data,
                                   SourcesPauli_LinkNode_next,
                                   SourcesPauli_ListLinked_first,
                                   SourcesPauli_ListLinked_last,
                                   obj,
                                   thiz,
                                   usedObjects]
   and 
   (
     all objx:SourcesPauli_ListLinked | {
       SourcesPauli_ListLinked_object_invariant[SourcesPauli_LinkNode_next,
                                               SourcesPauli_ListLinked_first,
                                               SourcesPauli_ListLinked_last,
                                               objx]
     
     }
   )

}

pred SourcesPauli_ListLinkedCondition4[
  SourcesPauli_ListLinked_first:univ->univ,
  thiz:univ
]{
   isEmptyOrNull[thiz]
   or 
   isEmptyOrNull[thiz.SourcesPauli_ListLinked_first]

}

pred SourcesPauli_ListLinkedCondition3[
  thiz:univ
]{
   not (
     isEmptyOrNull[thiz])

}

pred SourcesPauli_ListLinkedCondition24[
  exit_stmt_reached:univ,
  throw:univ,
  var_4_ws_1:univ
]{
   liftExpression[var_4_ws_1]
   and 
   (
     throw=null)
   and 
   (
     exit_stmt_reached=false)

}

pred SourcesPauli_ListLinkedCondition5[
  SourcesPauli_ListLinked_first:univ->univ,
  thiz:univ
]{
   not (
     isEmptyOrNull[thiz]
     or 
     isEmptyOrNull[thiz.SourcesPauli_ListLinked_first]
   )

}

pred SourcesPauli_ListLinkedCondition2[
  thiz:univ
]{
   isEmptyOrNull[thiz]

}

pred SourcesPauli_ListLinkedCondition19[
  t_11:univ
]{
   not (
     isEmptyOrNull[t_11])

}

pred SourcesPauli_ListLinkedCondition18[
  t_11:univ
]{
   isEmptyOrNull[t_11]

}

pred SourcesPauli_ListLinkedCondition20[
  t_12:univ
]{
   t_12=true

}

pred SourcesPauli_ListLinkedCondition22[
  t_13:univ
]{
   t_13=true

}

pred SourcesPauli_ListLinkedCondition21[
  t_12:univ
]{
   not (
     t_12=true)

}

pred SourcesPauli_ListLinkedCondition23[
  t_13:univ
]{
   not (
     t_13=true)

}

pred postcondition_SourcesPauli_ListLinked_remove_0[
  SourcesPauli_LinkNode_data':univ->univ,
  SourcesPauli_LinkNode_next:univ->univ,
  SourcesPauli_LinkNode_next':univ->univ,
  SourcesPauli_ListLinked_first:univ->univ,
  SourcesPauli_ListLinked_first':univ->univ,
  SourcesPauli_ListLinked_last':univ->univ,
  obj':univ,
  thiz:univ,
  thiz':univ,
  throw':univ
]{
   SourcesPauli_ListLinked_ensures[SourcesPauli_LinkNode_data',
                                  SourcesPauli_LinkNode_next,
                                  SourcesPauli_LinkNode_next',
                                  SourcesPauli_ListLinked_first,
                                  SourcesPauli_ListLinked_first',
                                  obj',
                                  thiz,
                                  thiz',
                                  throw']
   and 
   (
     not (
       throw'=AssertionFailureLit)
   )
   and 
   (
     all objx':SourcesPauli_ListLinked | {
       SourcesPauli_ListLinked_object_invariant[SourcesPauli_LinkNode_next',
                                               SourcesPauli_ListLinked_first',
                                               SourcesPauli_ListLinked_last',
                                               objx']
     
     }
   )

}

pred SourcesPauli_ListLinkedCondition1[
  exit_stmt_reached:univ,
  throw:univ
]{
   not (
     (
       throw=null)
     and 
     (
       exit_stmt_reached=false)
   )

}

pred SourcesPauli_ListLinkedCondition0[
  exit_stmt_reached:univ,
  throw:univ
]{
   (
     throw=null)
   and 
   (
     exit_stmt_reached=false)

}

pred SourcesPauli_ListLinked_requires[
  SourcesPauli_LinkNode_data:univ->univ,
  SourcesPauli_LinkNode_next:univ->univ,
  SourcesPauli_ListLinked_first:univ->univ,
  SourcesPauli_ListLinked_last:univ->univ,
  obj:univ,
  thiz:univ,
  usedObjects:univ
]{
   (
     some n:SourcesPauli_LinkNode+null | {
       liftExpression[true]
       and 
       (
         fun_set_contains[fun_reach[thiz.SourcesPauli_ListLinked_first,SourcesPauli_LinkNode,SourcesPauli_LinkNode_next],n]=true)
       and 
       equ[n.SourcesPauli_LinkNode_data,
          obj]
     
     }
   )
   and 
   (
     not (
       obj=null)
   )
   and 
   (
     usedObjects=fun_weak_reach[none+thiz+obj,java_lang_Object,(none)->(none)+SourcesPauli_ListLinked_first+SourcesPauli_ListLinked_last+SourcesPauli_LinkNode_data+SourcesPauli_LinkNode_next])

}

program SourcesPauli_ListLinked_remove_0[
  thiz:SourcesPauli_ListLinked,
  throw:java_lang_Throwable+null,
  obj:java_lang_Object+null,
  SourcesPauli_LinkNode_data:(SourcesPauli_LinkNode)->one(java_lang_Object+null),
  SourcesPauli_ListLinked_first:(SourcesPauli_ListLinked)->one(SourcesPauli_LinkNode+null),
  SourcesPauli_LinkNode_next:(SourcesPauli_LinkNode)->one(SourcesPauli_LinkNode+null),
  SourcesPauli_ListLinked_last:(SourcesPauli_ListLinked)->one(SourcesPauli_LinkNode+null),
  usedObjects:set (java_lang_Object)
] var [
  var_5_nextNode:SourcesPauli_LinkNode+null,
  t_15:boolean,
  param_obj_3:java_lang_Object+null,
  t_13:boolean,
  t_14:java_lang_Object+null,
  t_11:java_lang_Object+null,
  var_4_ws_1:boolean,
  t_12:boolean,
  t_10:SourcesPauli_LinkNode+null,
  var_2_currentNode:SourcesPauli_LinkNode+null,
  exit_stmt_reached:boolean,
  var_3_wasDeleted:boolean,
  t_8:boolean,
  t_9:SourcesPauli_LinkNode+null,
  t_6:SourcesPauli_LinkNode+null,
  t_7:SourcesPauli_LinkNode+null,
  t_5:SourcesPauli_LinkNode+null
]{
   skip;
   throw:=null;
   skip;
   exit_stmt_reached:=false;
   skip;
   if SourcesPauli_ListLinkedCondition0[exit_stmt_reached,throw]  {
      param_obj_3:=obj
   
   } else {
      skip
   
   }
   ;
   skip;
   skip;
   skip;
   if SourcesPauli_ListLinkedCondition0[exit_stmt_reached,throw]  {
      if SourcesPauli_ListLinkedCondition2[thiz]  {
         throw:=java_lang_NullPointerExceptionLit
      
      } else {
         var_2_currentNode:=thiz.SourcesPauli_ListLinked_first
      
      }
   
   } else {
      skip
   
   }
   ;
   if SourcesPauli_ListLinkedCondition0[exit_stmt_reached,throw]  {
      if SourcesPauli_ListLinkedCondition4[SourcesPauli_ListLinked_first,thiz]  {
         throw:=java_lang_NullPointerExceptionLit
      
      } else {
         call SourcesPauli_LinkNode_getData_0[thiz.SourcesPauli_ListLinked_first,throw,t_14,SourcesPauli_LinkNode_data,SourcesPauli_ListLinked_first,SourcesPauli_LinkNode_next,SourcesPauli_ListLinked_last,usedObjects]
      
      }
   
   } else {
      skip
   
   }
   ;
   if SourcesPauli_ListLinkedCondition0[exit_stmt_reached,throw]  {
      if SourcesPauli_ListLinkedCondition6[param_obj_3]  {
         throw:=java_lang_NullPointerExceptionLit
      
      } else {
         call java_lang_Object_equals_0[param_obj_3,throw,t_15,t_14,SourcesPauli_LinkNode_data,SourcesPauli_ListLinked_first,SourcesPauli_LinkNode_next,SourcesPauli_ListLinked_last,usedObjects]
      
      }
   
   } else {
      skip
   
   }
   ;
   if SourcesPauli_ListLinkedCondition0[exit_stmt_reached,throw]  {
      if SourcesPauli_ListLinkedCondition25[t_15]  {
         skip;
         skip;
         if SourcesPauli_ListLinkedCondition0[exit_stmt_reached,throw]  {
            if SourcesPauli_ListLinkedCondition4[SourcesPauli_ListLinked_first,thiz]  {
               throw:=java_lang_NullPointerExceptionLit
            
            } else {
               call SourcesPauli_LinkNode_getNext_0[thiz.SourcesPauli_ListLinked_first,throw,t_7,SourcesPauli_LinkNode_data,SourcesPauli_ListLinked_first,SourcesPauli_LinkNode_next,SourcesPauli_ListLinked_last,usedObjects]
            
            }
         
         } else {
            skip
         
         }
         ;
         if SourcesPauli_ListLinkedCondition0[exit_stmt_reached,throw]  {
            t_8:=(equ[t_7,null]=>(true)else(false))
         
         } else {
            skip
         
         }
         ;
         if SourcesPauli_ListLinkedCondition0[exit_stmt_reached,throw]  {
            if SourcesPauli_ListLinkedCondition14[t_8]  {
               skip;
               if SourcesPauli_ListLinkedCondition4[SourcesPauli_ListLinked_first,thiz]  {
                  throw:=java_lang_NullPointerExceptionLit
               
               } else {
                  call SourcesPauli_LinkNode_setData_0[thiz.SourcesPauli_ListLinked_first,throw,null,SourcesPauli_LinkNode_data,SourcesPauli_ListLinked_first,SourcesPauli_LinkNode_next,SourcesPauli_ListLinked_last,usedObjects]
               
               }
               ;
               if SourcesPauli_ListLinkedCondition0[exit_stmt_reached,throw]  {
                  getUnusedObject[t_5,usedObjects];
                  assume instanceOf[t_5,SourcesPauli_LinkNode];
                  if SourcesPauli_ListLinkedCondition8[t_5]  {
                     throw:=java_lang_NullPointerExceptionLit
                  
                  } else {
                     call SourcesPauli_LinkNode_Constructor_0[t_5,throw,SourcesPauli_LinkNode_data,SourcesPauli_ListLinked_first,SourcesPauli_LinkNode_next,SourcesPauli_ListLinked_last,usedObjects]
                  
                  }
               
               } else {
                  skip
               
               }
               ;
               if SourcesPauli_ListLinkedCondition0[exit_stmt_reached,throw]  {
                  if SourcesPauli_ListLinkedCondition2[thiz]  {
                     throw:=java_lang_NullPointerExceptionLit
                  
                  } else {
                     SourcesPauli_ListLinked_first:=(SourcesPauli_ListLinked_first)++((thiz)->(t_5))
                  
                  }
               
               } else {
                  skip
               
               }
               ;
               if SourcesPauli_ListLinkedCondition0[exit_stmt_reached,throw]  {
                  if SourcesPauli_ListLinkedCondition10[thiz]  {
                     throw:=java_lang_NullPointerExceptionLit
                  
                  } else {
                     SourcesPauli_ListLinked_last:=(SourcesPauli_ListLinked_last)++((thiz)->(thiz.SourcesPauli_ListLinked_first))
                  
                  }
               
               } else {
                  skip
               
               }
            
            } else {
               skip;
               if SourcesPauli_ListLinkedCondition12[var_2_currentNode]  {
                  throw:=java_lang_NullPointerExceptionLit
               
               } else {
                  call SourcesPauli_LinkNode_setData_0[var_2_currentNode,throw,null,SourcesPauli_LinkNode_data,SourcesPauli_ListLinked_first,SourcesPauli_LinkNode_next,SourcesPauli_ListLinked_last,usedObjects]
               
               }
               ;
               if SourcesPauli_ListLinkedCondition0[exit_stmt_reached,throw]  {
                  if SourcesPauli_ListLinkedCondition12[var_2_currentNode]  {
                     throw:=java_lang_NullPointerExceptionLit
                  
                  } else {
                     call SourcesPauli_LinkNode_getNext_0[var_2_currentNode,throw,t_6,SourcesPauli_LinkNode_data,SourcesPauli_ListLinked_first,SourcesPauli_LinkNode_next,SourcesPauli_ListLinked_last,usedObjects]
                  
                  }
               
               } else {
                  skip
               
               }
               ;
               if SourcesPauli_ListLinkedCondition0[exit_stmt_reached,throw]  {
                  var_2_currentNode:=t_6
               
               } else {
                  skip
               
               }
               ;
               if SourcesPauli_ListLinkedCondition0[exit_stmt_reached,throw]  {
                  if SourcesPauli_ListLinkedCondition2[thiz]  {
                     throw:=java_lang_NullPointerExceptionLit
                  
                  } else {
                     SourcesPauli_ListLinked_first:=(SourcesPauli_ListLinked_first)++((thiz)->(var_2_currentNode))
                  
                  }
               
               } else {
                  skip
               
               }
            
            }
         
         } else {
            skip
         
         }
      
      } else {
         skip;
         if SourcesPauli_ListLinkedCondition0[exit_stmt_reached,throw]  {
            var_3_wasDeleted:=false
         
         } else {
            skip
         
         }
         ;
         skip;
         if SourcesPauli_ListLinkedCondition0[exit_stmt_reached,throw]  {
            var_4_ws_1:=Not[var_3_wasDeleted]
         
         } else {
            skip
         
         }
         ;
         while SourcesPauli_ListLinkedCondition24[exit_stmt_reached,throw,var_4_ws_1]do {
            skip;
            skip;
            if SourcesPauli_ListLinkedCondition0[exit_stmt_reached,throw]  {
               if SourcesPauli_ListLinkedCondition12[var_2_currentNode]  {
                  throw:=java_lang_NullPointerExceptionLit
               
               } else {
                  call SourcesPauli_LinkNode_getNext_0[var_2_currentNode,throw,t_9,SourcesPauli_LinkNode_data,SourcesPauli_ListLinked_first,SourcesPauli_LinkNode_next,SourcesPauli_ListLinked_last,usedObjects]
               
               }
            
            } else {
               skip
            
            }
            ;
            skip;
            if SourcesPauli_ListLinkedCondition0[exit_stmt_reached,throw]  {
               var_5_nextNode:=t_9
            
            } else {
               skip
            
            }
            ;
            if SourcesPauli_ListLinkedCondition0[exit_stmt_reached,throw]  {
               t_13:=(neq[var_5_nextNode,null]=>(true)else(false))
            
            } else {
               skip
            
            }
            ;
            if SourcesPauli_ListLinkedCondition0[exit_stmt_reached,throw]  {
               if SourcesPauli_ListLinkedCondition22[t_13]  {
                  skip;
                  skip;
                  if SourcesPauli_ListLinkedCondition0[exit_stmt_reached,throw]  {
                     if SourcesPauli_ListLinkedCondition16[var_5_nextNode]  {
                        throw:=java_lang_NullPointerExceptionLit
                     
                     } else {
                        call SourcesPauli_LinkNode_getData_0[var_5_nextNode,throw,t_11,SourcesPauli_LinkNode_data,SourcesPauli_ListLinked_first,SourcesPauli_LinkNode_next,SourcesPauli_ListLinked_last,usedObjects]
                     
                     }
                  
                  } else {
                     skip
                  
                  }
                  ;
                  if SourcesPauli_ListLinkedCondition0[exit_stmt_reached,throw]  {
                     if SourcesPauli_ListLinkedCondition18[t_11]  {
                        throw:=java_lang_NullPointerExceptionLit
                     
                     } else {
                        call java_lang_Object_equals_0[t_11,throw,t_12,param_obj_3,SourcesPauli_LinkNode_data,SourcesPauli_ListLinked_first,SourcesPauli_LinkNode_next,SourcesPauli_ListLinked_last,usedObjects]
                     
                     }
                  
                  } else {
                     skip
                  
                  }
                  ;
                  if SourcesPauli_ListLinkedCondition0[exit_stmt_reached,throw]  {
                     if SourcesPauli_ListLinkedCondition20[t_12]  {
                        skip;
                        if SourcesPauli_ListLinkedCondition0[exit_stmt_reached,throw]  {
                           if SourcesPauli_ListLinkedCondition16[var_5_nextNode]  {
                              throw:=java_lang_NullPointerExceptionLit
                           
                           } else {
                              call SourcesPauli_LinkNode_getNext_0[var_5_nextNode,throw,t_10,SourcesPauli_LinkNode_data,SourcesPauli_ListLinked_first,SourcesPauli_LinkNode_next,SourcesPauli_ListLinked_last,usedObjects]
                           
                           }
                        
                        } else {
                           skip
                        
                        }
                        ;
                        if SourcesPauli_ListLinkedCondition12[var_2_currentNode]  {
                           throw:=java_lang_NullPointerExceptionLit
                        
                        } else {
                           call SourcesPauli_LinkNode_setNext_0[var_2_currentNode,throw,t_10,SourcesPauli_LinkNode_data,SourcesPauli_ListLinked_first,SourcesPauli_LinkNode_next,SourcesPauli_ListLinked_last,usedObjects]
                        
                        }
                        ;
                        if SourcesPauli_ListLinkedCondition0[exit_stmt_reached,throw]  {
                           var_5_nextNode:=((SourcesPauli_LinkNode+null) & (null))
                        
                        } else {
                           skip
                        
                        }
                        ;
                        if SourcesPauli_ListLinkedCondition0[exit_stmt_reached,throw]  {
                           var_3_wasDeleted:=true
                        
                        } else {
                           skip
                        
                        }
                     
                     } else {
                        if SourcesPauli_ListLinkedCondition0[exit_stmt_reached,throw]  {
                           var_2_currentNode:=var_5_nextNode
                        
                        } else {
                           skip
                        
                        }
                     
                     }
                  
                  } else {
                     skip
                  
                  }
               
               } else {
                  skip
               
               }
            
            } else {
               skip
            
            }
            ;
            if SourcesPauli_ListLinkedCondition0[exit_stmt_reached,throw]  {
               var_4_ws_1:=Not[var_3_wasDeleted]
            
            } else {
               skip
            
            }
         
         }
      
      }
   
   } else {
      skip
   
   }
   ;
   skip

}

assertCorrectness check_SourcesPauli_ListLinked_remove_0[
  SourcesPauli_LinkNode_data:(SourcesPauli_LinkNode)->one(java_lang_Object+null),
  SourcesPauli_LinkNode_next:(SourcesPauli_LinkNode)->one(SourcesPauli_LinkNode+null),
  SourcesPauli_ListLinked_first:(SourcesPauli_ListLinked)->one(SourcesPauli_LinkNode+null),
  SourcesPauli_ListLinked_last:(SourcesPauli_ListLinked)->one(SourcesPauli_LinkNode+null),
  exit_stmt_reached:boolean,
  obj:java_lang_Object+null,
  param_obj_3:java_lang_Object+null,
  t_10:SourcesPauli_LinkNode+null,
  t_11:java_lang_Object+null,
  t_12:boolean,
  t_13:boolean,
  t_14:java_lang_Object+null,
  t_15:boolean,
  t_5:SourcesPauli_LinkNode+null,
  t_6:SourcesPauli_LinkNode+null,
  t_7:SourcesPauli_LinkNode+null,
  t_8:boolean,
  t_9:SourcesPauli_LinkNode+null,
  thiz:SourcesPauli_ListLinked,
  throw:java_lang_Throwable+null,
  usedObjects:set (java_lang_Object),
  var_2_currentNode:SourcesPauli_LinkNode+null,
  var_3_wasDeleted:boolean,
  var_4_ws_1:boolean,
  var_5_nextNode:SourcesPauli_LinkNode+null
]{
pre={
   precondition_SourcesPauli_ListLinked_remove_0[SourcesPauli_LinkNode_data,
                                                SourcesPauli_LinkNode_next,
                                                SourcesPauli_ListLinked_first,
                                                SourcesPauli_ListLinked_last,
                                                obj,
                                                thiz,
                                                throw,
                                                usedObjects]

}
program={
   call SourcesPauli_ListLinked_remove_0[thiz,throw,obj,SourcesPauli_LinkNode_data,SourcesPauli_ListLinked_first,SourcesPauli_LinkNode_next,SourcesPauli_ListLinked_last,usedObjects]

}
post={
   postcondition_SourcesPauli_ListLinked_remove_0[SourcesPauli_LinkNode_data',
                                                 SourcesPauli_LinkNode_next,
                                                 SourcesPauli_LinkNode_next',
                                                 SourcesPauli_ListLinked_first,
                                                 SourcesPauli_ListLinked_first',
                                                 SourcesPauli_ListLinked_last',
                                                 obj',
                                                 thiz,
                                                 thiz',
                                                 throw']

}
}

